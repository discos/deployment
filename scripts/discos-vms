#!/usr/bin/env python
"""Some command line examples:

  $ discos-vms start manager
  $ discos-vms restart console storage
  $ discos-vms stop storage
  $ discos-vms status
  $ discos-vms export manager
  $ discos-vms destroy console
"""
import sys
import argparse
import deployment

machines = deployment._vagrantList()

parser = argparse.ArgumentParser(
    description=(f'Handle a DISCOS environment. {__doc__}'),
    formatter_class=argparse.RawTextHelpFormatter
)
parser.add_argument(
    'action',
    choices=['status', 'start', 'stop', 'restart', 'create', 'destroy', 'export', 'list'],
)
parser.add_argument(
    'machine',
    nargs='?',
    type=str,
    help=(
        f'the desired machine. '
        f'Leave this field empty to select all available machines.'
    ),
    choices=machines,
    default=None
)
parser.add_argument(
    '-v', '--verbose',
    action='store_true',
    help='call Ansible with verbose output'
)
args = parser.parse_args()

if not args.verbose:
    try:
        from subprocess import DEVNULL
    except ImportError:
        DEVNULL = open(os.devnull, 'wb')
    deployment.STDOUT = DEVNULL
    deployment.STDERR = DEVNULL

if not args.machine:
    args.machine = machines
elif not isinstance(args.machine, list):
    args.machine = [args.machine]

if 'storage' in args.machine and len(args.machine) > 1:
    args.machine.insert(0, args.machine.pop(args.machine.index('storage')))

if args.action in ['stop', 'destroy']:
    args.machine.reverse()

if args.action == 'list':
    print('Machines available for deployment: ')

for machine in args.machine:
    if args.action == 'status':
        deployment.statusVm(machine)
    elif args.action == 'start':
        deployment.startVm(machine)
    elif args.action == 'stop':
        deployment.stopVm(machine)
    elif args.action == 'restart':
        deployment.restartVm(machine)
    elif args.action == 'create':
        deployment.createVm(machine)
    elif args.action == 'destroy':
        deployment.destroyVm(machine)
    elif args.action == 'export':
        deployment.exportVm(machine)
    elif args.action == 'list':
        print(machine)
