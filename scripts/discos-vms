#!/usr/bin/env python

import sys
import os
import time
import subprocess
from pexpect import pxssh
from argparse import ArgumentParser, ArgumentTypeError

def machine_id_from_name(machine_name_arg):
    cmd = subprocess.Popen(
        'VBoxManage list vms',
        shell=True,
        stdout=subprocess.PIPE
    )
    machines = {}
    for line in cmd.stdout:
        m_id = line.split()[0].strip('"')
        m_name = m_id.replace('deployment_', '')
        m_name = m_name.split('_')[0]
        machines[m_name] = m_id
    try:
        setattr(sys.modules[__name__], 'machine_name', machine_name_arg)
        return machines[machine_name_arg]
    except KeyError:
        raise ArgumentTypeError(
            ("Machine %s unavailable. "
            + "Try deploying it typing 'discos-deploy %s:development'")
            % (machine_name_arg, machine_name_arg)
        )

def machine_state(name):
    cmd = subprocess.Popen(
        'VBoxManage showvminfo "%s"' % name,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    for line in cmd.stdout:
        if 'State' in line:
            state = ' '.join(line.strip().split()[1:-2])
            return state

parser = ArgumentParser()
parser.add_argument(
    '-m', '--machine',
    type=machine_id_from_name,
    required=True
)
parser.add_argument('action', choices=['start', 'stop'])
args = parser.parse_args()

if args.action == 'start':
    if machine_state(args.machine) == 'running':
        print 'Machine %s is already running.' % machine_name
        sys.exit()
    counter = 0
    sys.stdout.write('Starting machine %s' % machine_name)
    sys.stdout.flush()
    subprocess.call(
        'VBoxManage startvm "%s" --type headless' % args.machine,
        shell=True,
        stdout=subprocess.PIPE
    )
    while True:
        t0 = time.time()
        IP = subprocess.Popen(
            (
                'VBoxManage guestproperty get %s /VirtualBox/GuestInfo/Net/1/V4/IP'
                % args.machine
            ),
            shell=True,
            stdout=subprocess.PIPE
        ).stdout.read().strip()
        if IP != 'No value set!':
            break
        sys.stdout.write('.')
        sys.stdout.flush()
        time.sleep(max(0, 1 - (time.time() - t0)))
    print 'done.'
elif args.action == 'stop':
    if machine_state(args.machine) == 'powered off':
        print 'Machine %s is not running.' % machine_name
        sys.exit()
    sys.stdout.write('Powering off machine %s' % machine_name)
    sys.stdout.flush()
    IP = subprocess.Popen(
        (
            'VBoxManage guestproperty get %s /VirtualBox/GuestInfo/Net/1/V4/IP'
            % args.machine
        ),
        shell=True,
        stdout=subprocess.PIPE
    ).stdout.read().strip().split(' ')[1]

    while True:
        try:
            ssh = pxssh.pxssh()
            ssh.login(IP, 'root', 'vagrant')
            ssh.sendline('shutdown now')
            ssh.logout()
            break
        except pxssh.ExceptionPxssh:
            sys.stdout.write('.')
            sys.stdout.flush()
            time.sleep(1)

    while machine_state(args.machine) != 'powered off':
        sys.stdout.write('.')
        sys.stdout.flush()
        time.sleep(1)
    print 'done.'
