#!/usr/bin/env python
"""Some command line examples:

  $ discos-deploy discos:development
  $ discos-deploy discos:srt
  $ discos-deploy manager:medicina --branch master
  $ discos-deploy manager:noto --tag discos1.0-rc02
  $ discos-deploy console:development --no-vagrant
  $ discos-deploy manager:development --branch master --station srt
"""

from __future__ import print_function
import utils
import sys
import subprocess
import os
import argparse
import getpass

STATIONS = { 'srt': 'SRT', 'medicina': 'Medicina', 'noto': 'Noto' }
ENVIRONMENTS = utils.getInventories()

inventories = {}
systems = []
for env in ENVIRONMENTS:
    h, g, c = utils.parseInventory(env)
    inventories[env] = {}
    inventories[env]['hosts'] = h
    inventories[env]['groups'] = g
    inventories[env]['clusters'] = c

    for cluster in c:
        systems.append('{}:{}'.format(cluster, env))

parser = argparse.ArgumentParser(
    description='Make a DISCOS environment. {}'.format(__doc__),
    formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument(
    'system',
    help='{0}, {1}, ...'.format(*systems)
)
parser.add_argument(
    '-s',
    '--station',
    choices=STATIONS.keys(),
    default=None,
    help='the desired station'
)
group = parser.add_mutually_exclusive_group()
group.add_argument(
    '-b',
    '--branch',
    help='the desired DISCOS branch to be deployed on the machines'
)
group.add_argument(
    '-t',
    '--tag',
    help='the desired DISCOS tag to be deployed on the machines'
)
parser.add_argument(
    '--no-vagrant',
    action='store_true',
    help='forces the process to not use Vagrant with development machines'
)
parser.add_argument(
    '--sim',
    action='store_true',
    help='simulation mode'
)
args = parser.parse_args()

# Check if the system cluster:environment exists
if args.system.count(':') != 1:
    e = ENVIRONMENTS[-1]  # A random environment
    c = inventories[e]['clusters'][-1]  # A random cluster
    msg = (
        'You must specify an available system.\n'
        + 'e.g. if the cluster is "{0}" '
        + 'and the environment is "{1}",\n'
        + 'the system is "{0}:{1}", and the command will be:'
        + '\n\n  $ discos-deploy {0}:{1}.\n\n'
    )
    utils.error(
        msg.format(*[c, e]),
        choices=systems,
        name='system'
    )
else:
    cluster_arg, env_arg = args.system.split(':')
    if env_arg in ENVIRONMENTS:
        allowed_clusters = inventories[env_arg]['clusters']
        c = allowed_clusters[-1]  # A random cluster
        # wrong_cluster:right_env
        if cluster_arg not in allowed_clusters:
            msg = (
                'Cluster "{}" not found in the "{}" environment.\n'
            ).format(cluster_arg, env_arg)
            utils.error(
                msg,
                allowed_clusters,
                name='cluster (in {})'.format(env_arg)
            )
    else:
        all_clusters = []
        for env in ENVIRONMENTS:
            for cluster in inventories[env]['clusters']:
                if cluster not in all_clusters:
                    all_clusters.append(cluster)
        # right_cluster:wrong_env
        if cluster_arg in all_clusters:
            msg = (
                'Environment "{}" not found in {}.\nPlease use a right '
                + 'cluster:environment combination, like:\n{}, {}, {}, ...'
            )
            utils.error(
                msg.format(
                    env_arg, ENVIRONMENTS, systems[0], systems[-1], systems[-2]
                )
            )
        # wrong_cluster:wrong_env
        if cluster_arg not in all_clusters:
            utils.error(
                'System "{}:{}" not recognized.\n'.format(cluster_arg, env_arg),
                systems,
                name='system'
            )

inventory = os.path.join(utils.ANSIBLE_DIR, 'inventories', env_arg)
playbook = os.path.join(utils.ANSIBLE_DIR, 'all.yml')
os.chdir(utils.ANSIBLE_DIR)

# Machines to provision in the current process
current_machines = []
if cluster_arg in inventories[env_arg]['groups']:
    current_machines = inventories[env_arg]['groups'][cluster_arg]
else:
    current_machines.append(cluster_arg)

extra_vars = []
if env_arg != 'development':
    extra_vars.append('station={}'.format(STATIONS[env_arg]))

if args.branch or args.tag:
    if env_arg == 'development':
        if not args.station:
            utils.error(
                "When deploying onto 'development' environment, "
                + "--station' argument must be specified."
            )
        elif args.station not in STATIONS.keys():
            utils.error('Unknown station `{}`.'.format(args.station))
        extra_vars.append('cdb=test')
        extra_vars.append('station={}'.format(STATIONS[args.station]))
    else:
        if args.station and args.station != env_arg:
            utils.error(
                "With '{}' environment, '--station'".format(env_arg)
                + "argument defaults to '{}', ".format(env_arg)
                + 'you cannot specify a different station.'
            )
        extra_vars.append('cdb=telescope')
    if args.branch:
        extra_vars.append('branch={}'.format(args.branch))
    else:
        extra_vars.append('tag={}'.format(args.tag))

root_pwds = {}
ips = {}
for machine in current_machines:
    # Initialize a root password for each machine
    root_pwds[machine] = ''
    if env_arg == 'development' and not args.no_vagrant:
        root_pwds[machine] = 'vagrant'
    # Get the ip of each current machine
    ips[machine] = inventories[env_arg]['hosts'][machine]['ip']

# Check machine availability
if not args.sim:
    for machine in current_machines:
        reachable = utils.ping(ips[machine])
        if not reachable:
            if env_arg == 'development' and not args.no_vagrant:
                if args.sim:
                    print('vagrant up {}'.format(machine))
                else:
                    # Create/bring up virtual machines
                    code = utils.createVm(machine)
                    if code:
                        utils.error(
                            'Some problems starting '
                            + 'machine {}.'.format(machine),
                            code=code
                        )
            else:
                utils.error(
                    'Machine {} not reachable.'.format(machine)
                    + ' Check your configuration and retry.'
                )

if not args.sim:
    # Get or generate the RSA public key
    public_key = utils.getRSAKey()
    # Add the IPs to known_hosts
    utils.updateKnownHosts(ips.values())

# Ask for root password
manager_sessions = []
console_sessions = []
storage_sessions = []
if not args.sim:
    for machine in current_machines:
        root_pwd = root_pwds[machine]
        ip = inventories[env_arg]['hosts'][machine]['ip']
        ssh = utils.sshLogin(ip)
        if not ssh:
            ssh = utils.sshLogin(ip, root_pwds[machine])
        if not ssh:
            # Cannot authenticate, it means we have to ask for password
            root_pwd = getpass.getpass(
                '\nType the root password for machine {}: '.format(machine)
            )
            ssh = utils.sshLogin(ip, root_pwd)
        if not ssh:
            utils.error(
                'Cannot authenticate to machine {}'.format(machine)
                + ', probable wrong password.'
            )
        else:
            root_pwds[machine] = root_pwd
            if 'manager' in machine:
                manager_sessions.append(ssh)
            elif 'console' in machine:
                console_sessions.append(ssh)
            elif 'storage' in machine:
                storage_sessions.append(ssh)

# Insert the local public key into target machines
# in order to enable public key ssh access
for ssh in manager_sessions + console_sessions + storage_sessions:
    utils.authorizeKey(ssh, public_key)

# Disable network manager in virtual machines
if env_arg == 'development' and not args.no_vagrant and not args.sim:
    for ssh in manager_sessions + console_sessions:
        utils.detachFromNM(ssh, 'eth0')

ansible_env = os.environ.copy()
# Check if user discos is present in the machines,
# otherwise ask for its password
discos_pwd = ''
for ssh in manager_sessions + console_sessions + storage_sessions:
    if discos_pwd:
        break
    result = utils.sshCommand(ssh, 'getent passwd discos')

    if not result.stdout:
        discos_pwd = getpass.getpass('\nType the `discos` user desired password: ')
        if not discos_pwd:
            utils.error(
                'A password is required for user `discos`.'
            )
        if discos_pwd != getpass.getpass('Confirm password: '):
            utils.error(
                'Typed password and confirm does not match. Retry.'
            )
        ansible_env['DISCOS_PWD'] = discos_pwd

# Check if user observer is present in the console machine,
# otherwise ask for its password
observer_pwd = ''
for ssh in console_sessions:
    if observer_pwd:
        break
    result = utils.sshCommand(ssh, 'getent passwd observer')

    if not result.stdout:
        observer_pwd = getpass.getpass('\nType the `observer` user desired password: ')
        if not observer_pwd:
            utils.error(
                'A password is required for user `observer`.'
            )
        if observer_pwd != getpass.getpass('Confirm password: '):
            utils.error(
                'Typed password and confirm does not match. Retry.'
            )
        ansible_env['OBSERVER_PWD'] = observer_pwd

# Close the ssh sessions
for ssh in manager_sessions + console_sessions + storage_sessions:
    ssh.logout()
del manager_sessions
del console_sessions
del storage_sessions

# Call ansible
ansible_cmd = [
    'ansible-playbook', playbook,
    '--inventory-file', inventory,
    '--limit', cluster_arg,
    '--extra-vars', ' '.join(extra_vars),
]

print('\nCalling ansible...')
if args.sim:
    print(' '.join(ansible_cmd))
else:
    subprocess.call(ansible_cmd, env=ansible_env, shell=False)
