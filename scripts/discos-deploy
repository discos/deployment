#!/usr/bin/env python
"""Some command line examples:

  $ discos-deploy discos:development
  $ discos-deploy discos:srt
  $ discos-deploy manager:medicina --branch master
  $ discos-deploy manager:noto --branch discos1.0-rc02
  $ discos-deploy console:development --no-vagrant
  $ discos-deploy manager:development --branch master --station srt
"""

import sys
import subprocess
import os
import argparse
import deployment

STATIONS = { 'srt': 'SRT', 'medicina': 'Medicina', 'noto': 'Noto' }
INVENTORIES, SYSTEMS = deployment.getEnvironments()
BRANCHES = deployment.getBranches()
cluster = ''
env = ''

parser = argparse.ArgumentParser(
    description=(f'Make a DISCOS environment. {__doc__}'),
    formatter_class=argparse.RawTextHelpFormatter
)

def system(_system):
    if _system not in SYSTEMS:
        parser.error(f"argument SYSTEM: unknown SYSTEM: {_system}")
    try:
        global cluster, env
        cluster, env = _system.split(':')
    except:
        pass
    return _system

def station(_station):
    if _station not in STATIONS.keys():
        parser.error(
            f"argument -s/--station: unknown station: '{_station}' "
            f"(choose from: '" + "', '".join(STATIONS.keys()) + ")'"
        )
    elif env != 'development' and _station != env:
        parser.error(
            f"argument -s/--station: argument defaulted to '{env}' from "
            f"'{cluster}:{env}' choice, you cannot specify a different value"
        )
    return _station

parser.add_argument(
    'system',
    type=system,
    choices=SYSTEMS,
    metavar='SYSTEM',
    help='\n' + '\n'.join(SYSTEMS)
)
parser.add_argument(
    '-s',
    '--station',
    type=station,
    choices=STATIONS.keys(),
    metavar='STATION',
    default=None,
    help='\n'.join(STATIONS.keys())
)
parser.add_argument(
    '-b',
    '--branch',
    type=str,
    choices=BRANCHES if BRANCHES else None,
    metavar='BRANCH',
    help=(
        'WARNING: remote DISCOS repository unreachable! '
        'Be sure to type the name of an existing branch if deploying!'
        if not BRANCHES else '\n'.join(BRANCHES)
    )
)
parser.add_argument(
    '--no-vagrant',
    action='store_true',
    help=(
        'forces the process to not use Vagrant '
        'when provisioning development machines'
    )
)
parser.add_argument(
    '--deploy-only',
    action='store_true',
    help='only deploy the DISCOS Control Software'
)
parser.add_argument(
    '--sim',
    action='store_true',
    help='only print the final Ansible command'
)
args = parser.parse_args()

if env != 'development' and not args.station:
    args.station = env

if args.branch and not args.station:
    parser.error(
        f"argument -s/--station: argument is required "
        f"when deploying a DISCOS branch or tag"
    )

if args.deploy_only and not args.branch:
    parser.error(
        f"argument -b/--branch: argument is required "
        f"when deploying a DISCOS branch or tag"
    )

# Retrieve inventory and playbook
inventory = os.path.join(deployment.INVENTORIES_DIR, env)
playbook = os.path.join(deployment.ANSIBLE_DIR, env + '.yml')

# Collect machines to be provisioned or deployed on in the current process
machines = {}
if cluster in INVENTORIES[env]['groups']:
    for machine in INVENTORIES[env]['groups'][cluster]:
        machines[machine] = INVENTORIES[env]['hosts'][machine]['ip']
else:
    machines[cluster] = INVENTORIES[env]['hosts'][cluster]['ip']

if not args.sim:
    # Generate the RSA key pair if needed
    deployment.generateRSAKey()
    # Check if the chosen machines are reachable
    for machine, ip in machines.items():
        if env == 'development' and not args.no_vagrant:
            if not deployment.ping(ip):
                # Create or start virtual machine(s)
                code = deployment.createVm(machine)
                if code:
                    deployment.error(
                        f'Encountered some problems while starting '
                        f'machine {machine}.',
                        code=code
                    )
        else:
            if not deployment.ping(ip):
                deployment.error(
                    f'Machine {machine} unreachable.'
                    f' Check your network and ssh configurations and retry.'
                )
    # Add the IPs to known_hosts
    deployment.updateKnownHosts(machines.values())
    # Ask for root password
    deployment.injectRSAKey(machines)

# Create the ansible command
ansible_cmd = [
    'ansible-playbook', playbook,
    '--inventory-file', inventory,
    '--limit', cluster
]

extra_vars = []
if args.station:
    extra_vars.append(f'station={STATIONS[args.station]}')
    if env == 'development':
        extra_vars.append('cdb=test')
    else:
        extra_vars.append('cdb=telescope')
if args.branch:
    extra_vars.append(f'branch={args.branch}')

if extra_vars:
    extra_vars = ['--extra-vars', '"' + ' '.join(extra_vars) + '"']

# Check if we want provision only or deployment only
ansible_tags = []
if args.deploy_only:
    ansible_tags = ['--tags', '"deploy"']
elif not args.branch:
    ansible_tags = ['--skip-tags', '"deploy"']

# Add extra variables to the ansible command
ansible_cmd += ansible_tags + extra_vars
ansible_cmd = ' '.join(ansible_cmd)

print('Calling Ansible...')
if args.sim:
    print(ansible_cmd)
    sys.exit()
else:
    sys.exit(subprocess.call(ansible_cmd, shell=True))
