#! /usr/bin/env python
"""Some command line examples:

  $ discos-deploy discos:development
  $ discos-deploy discos:srt
  $ discos-deploy manager:medicina --deploy master
  $ discos-deploy as:development
  $ discos-deploy manager:development --deploy master --station srt
"""

from __future__ import print_function
import os
import sys
import time
import argparse
import subprocess
import getpass
import socket
from pexpect import pxssh
from Crypto.PublicKey import RSA

ROOT_DIR = os.path.dirname(os.path.realpath(__file__)).rsplit('/', 1)[0]
STATIONS = ('srt', 'medicina', 'noto')
ANSIBLE_DIR = os.path.join(ROOT_DIR, 'ansible')
INVENTORIES_DIR = os.path.join(ANSIBLE_DIR, 'inventories')

ENVIRONMENTS = []

for item in os.listdir(INVENTORIES_DIR):
    if not os.path.isfile(os.path.join(INVENTORIES_DIR, item)):
        ENVIRONMENTS.append(item)

groups = {}
hosts = {}
clusters = {}
systems = []
for env in ENVIRONMENTS:
    hosts[env] = {}
    groups[env] = {}
    clusters[env] = []
    inventory = '%s/%s' % (INVENTORIES_DIR, env)
    hosts_file = os.path.join(inventory, 'hosts')
    with open(hosts_file) as f:
        for line in f:
            if line[0] == '#':
                continue
            if '[' in line and ']' in line:
                if ':' not in line:
                    current_group = line[line.find('[')+1:line.find(']')]
                else:
                    current_group = line[line.find('[')+1:line.find(':')]
                    groups[env][current_group] = []
            elif 'ansible_host' in line:
                hostname, ansible_host = line.split()
                _ ,ansible_host = ansible_host.split('=')
                host = {}
                host['hostname'] = hostname
                host['ansible_host'] = ansible_host            
                hosts[env][current_group] = host
            elif line != '\n' and current_group:
                host = line.strip()
                if host in hosts[env].keys():
                    groups[env][current_group].append(line.strip())
                elif host in groups[env].keys():
                    for machine in groups[env][host]:
                        if machine not in groups[env][current_group]:
                            groups[env][current_group].append(machine)
    clusters[env] = hosts[env].keys() + groups[env].keys()
    for cluster in clusters[env]:
        systems.append('%s:%s' % (cluster, env))

parser = argparse.ArgumentParser(
    description='Make a DISCOS environment. %s' % __doc__,
    formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument(
    'system',
    help='%s, %s, ...' % (systems[-1], systems[-2]))
parser.add_argument(
    '-s',
    '--station',
    choices=STATIONS,
    default=None)
parser.add_argument(
    '-d',
    '--deploy')
parser.add_argument(
    '--sim',
    action='store_true',
    help='simulation mode')

def error(msg, choices=(), name=''):
    if choices:
        choices_msg = 'Allowed values of %s:\n' % name
    else:
        choices_msg = ''
    print('\nERROR: %s%s' % (msg, choices_msg), file=sys.stderr)
    if choices:
        for choice in choices:
            print(' '*2, choice, file=sys.stderr)
    print('\n%s' %  __doc__, file=sys.stderr)
    sys.exit(1)
args = parser.parse_args()

# Check if the system cluster:environment exists
if args.system.count(':') != 1:
    e = ENVIRONMENTS[-1]  # A random environment
    c = clusters[e][-1]  # A random cluster
    msg = ('You must specify an available system.\n'
           'e.g. if the cluster is "%s" '
           'and the environment is "%s",\n'
           'the system is "%s:%s", and the command will be:'
           '\n\n  $ discos-deploy %s:%s.\n\n' % (c, e, c, e, c, e))
    error(msg, choices=systems, name='system')
else:
    cluster_arg, env_arg = args.system.split(':')
    if env_arg in ENVIRONMENTS:
        allowed_clusters = clusters[env_arg]
        c = allowed_clusters[-1]  # A random cluster
        # wrong_cluster:right_env
        if cluster_arg not in allowed_clusters:
            msg = ('Cluster "%s" not found in the "%s" '
                   'environment.\n' % (cluster_arg, env_arg))
            error(msg,
                  allowed_clusters,
                  name='cluster (in %s)' % env_arg)
    else:
        all_clusters = []
        for env in ENVIRONMENTS:
            for cluster in clusters[env]:
                if cluster not in all_clusters:
                    all_clusters.append(cluster)
        # right_cluster:wrong_env
        if cluster_arg in all_clusters:
            msg = ('Environment "%s" not found in %s.\n'
                   'Please use a right cluster:environment combination, like:\n'
                   '%s, %s, %s, ...'
                   % (env_arg, ENVIRONMENTS, systems[0], systems[-1], systems[-2]))
            error(msg)
        # wrong_cluster:wrong_env
        if cluster_arg not in all_clusters:
            error('System "%s:%s" not recognized.\n' % (cluster_arg, env_arg),
                  systems,
                  name='system')

inventory = '%s/inventories/%s' % (ANSIBLE_DIR, env_arg)
playbook = '%s/all.yml'  % ANSIBLE_DIR
os.chdir(ANSIBLE_DIR)

# Create the .ssh directory
ssh_dir = os.path.join(os.environ['HOME'], '.ssh')
if not os.path.exists(ssh_dir):
    os.mkdir(ssh_dir, 0700)

# Generate the public/private key pair (if not present)
key_file = os.path.join(ssh_dir, 'id_rsa')
if not os.path.exists(key_file):
    key = RSA.generate(2048)
    private_key = key.exportKey('PEM')
    public_key = key.publickey().exportKey('OpenSSH')
    public_key += ' %s@%s' % (getpass.getuser(), socket.gethostname())
    open(key_file, 'w').write(private_key)
    os.chmod(key_file, 0600)
    open(key_file + '.pub', 'w').write(public_key)
    os.chmod(key_file + '.pub', 0644)

public_key = open(key_file + '.pub').read().strip()

# Machines to provision in the current process
current_machines = []
if cluster_arg in groups[env_arg]:
    current_machines = groups[env_arg][cluster_arg]
else:
    current_machines.append(cluster_arg)

extra_vars = ''
if env_arg == 'development':
    if bool(args.deploy) ^ bool(args.station):
        error('With `development` environment, both or no '
            + '`--deploy` and `--station` arguments have to be specified.')
    elif args.deploy and args.station:
        if args.station not in STATIONS:
            error('Unknown station `%s`.' % args.station)
        else:
            extra_vars += ' branch=%s station=%s cdb=test' % (args.deploy, args.station)
else:
    if args.station:
        if args.station != env_arg:
            error('With `%s` environment, `--station` argument defaults to `%s`, ' % (env_arg, env_arg)
                + 'you cannot specify a different station.')
    if args.deploy:
        extra_vars += ' branch=%s station=%s cdb=telescope' % (args.deploy, env_arg)

# Initialize a root password for each machine
root_pwds = {}
for machine in current_machines:
    if env_arg == 'development':
        root_pwds[machine] = 'vagrant'
    else:
        root_pwds[machine] = ''

# Bring up the virtual machines if environment=development
if env_arg == 'development':
    print('Calling Vagrant...\n')
    if args.sim:
        print('vagrant up %s' % ' '.join(current_machines))
    else:
        for machine in current_machines:
            sys.stdout.write('Starting machine %s' % machine)
            sys.stdout.flush()
            proc = subprocess.Popen(
                ['vagrant', 'up', machine],
                shell=False,
                stdout=subprocess.PIPE
            )
            while True:
                code = proc.poll()
                if code is not None:
                    if code != 0:
                        print(
                            '\nERROR: some problems starting machine %s'
                            % machine
                        )
                        sys.exit(code)
                    else:
                        print('done.')
                        break
                else:
                    sys.stdout.write('.')
                    sys.stdout.flush()
                    time.sleep(1)


# Add the IPs to known_hosts
if not args.sim:
    known_hosts = os.path.join(ssh_dir, 'known_hosts')
    for host_name in current_machines:
        ip = hosts[env_arg][host_name]['ansible_host']
        subprocess.call(
            ['ssh-keygen', '-R', ip],
            shell=False,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        subprocess.call(
            ['ssh-keyscan', '-H', ip],
            shell=False,
            stderr=subprocess.PIPE,
            stdout=open(known_hosts, 'a')
        )


def ssh_login(ip, password=None):
    try:
        ssh = pxssh.pxssh()
        if not password:
            ssh.login(ip, 'root')
        else:
            ssh.login(ip, 'root', password)
        return ssh
    except pxssh.ExceptionPxssh:
        return None


def ssh_command(ssh, command):
    ssh.sendline(command)
    ssh.prompt()
    output = [string.strip() for string in ssh.before.split('\n')][1:-1]
    ssh.sendline('echo $?')
    ssh.prompt()
    retval = not bool(int(ssh.before.split('\n')[1:-1][0].strip()))
    #retval = not bool(int(ssh.before.split('\n')[0]))
    return {'returncode': retval, 'stdout': output}


ansible_env = os.environ.copy()
manager_sessions = []
console_sessions = []
if not args.sim:
    for machine in current_machines:
        root_pwd = root_pwds[machine]
        ip = hosts[env_arg][machine]['ansible_host']
        ssh = ssh_login(ip)
        if not ssh:
            ssh = ssh_login(ip, root_pwds[machine])
        if not ssh:
            # Cannot authenticate, it means we have to ask for password
            root_pwd = getpass.getpass(
                '\nType the root password for machine %s: ' % machine
            )
            ssh = ssh_login(ip, root_pwd)
        if not ssh:
            error(
                'Cannot authenticate to machine %s, probable wrong password.'
                % machine
            )
        else:
            root_pwds[machine] = root_pwd
            if 'manager' in machine:
                manager_sessions.append(ssh)
            if 'console' in machine:
                console_sessions.append(ssh)


for ssh in manager_sessions + console_sessions:
    ssh_command(ssh, 'mkdir .ssh')
    ssh_command(ssh, 'chmod 0700 .ssh')
    auth_file = ssh_command(ssh, 'cat .ssh/authorized_keys')
    found = False
    if auth_file['returncode']:
        for line in auth_file['stdout']:
            if public_key in line:
                found = True
    if not auth_file['returncode'] or not found:
        ssh_command(ssh, 'echo "%s" >> .ssh/authorized_keys' % public_key)
        ssh_command(ssh, 'chmod 0600 .ssh/authorized_keys')


discos_pwd = ''
for ssh in manager_sessions + console_sessions:
    if discos_pwd:
        break
    result = ssh_command(ssh, 'getent passwd discos')

    if not result['stdout']:
        # User discos not present in a target machine, asking password
        discos_pwd = getpass.getpass('\nType the `discos` user desired password: ')
        if not discos_pwd:
            error('A password is required for user `discos`.')
        if discos_pwd != getpass.getpass('Confirm password: '):
            error('Typed password and confirm does not match. Retry.')
        ansible_env['DISCOS_PWD'] = discos_pwd


observer_pwd = ''
for ssh in console_sessions:
    if observer_pwd:
        break
    result = ssh_command(ssh, 'getent passwd observer')

    if not result['stdout']:
        # User observer not present in a target machine, asking password
        observer_pwd = getpass.getpass('\nType the `observer` user desired password: ')
        if not observer_pwd:
            error('A password is required for user `observer`.')
        if observer_pwd != getpass.getpass('Confirm password: '):
            error('Typed password and confirm does not match. Retry.')
        ansible_env['OBSERVER_PWD'] = observer_pwd


# Close the ssh sessions
for ssh in manager_sessions + console_sessions:
    ssh.logout()

del manager_sessions
del console_sessions


# Call ansible
ansible_cmd = [
    'ansible-playbook', playbook,
    '--inventory-file', inventory,
    '--limit', cluster_arg,
    '--extra-vars', "'%s'" % extra_vars.strip(),
]

print('\nCalling ansible...')
if args.sim:
    print(' '.join(ansible_cmd))
else:
    subprocess.call(ansible_cmd, env=ansible_env, shell=False)
