#! /usr/bin/env python

import sys
import os
import subprocess
from argparse import ArgumentParser, ArgumentTypeError

remote_starting_port = 15000
local_starting_port = 5900
users = {
    'discos': 1,
    'observer': 2
}
cmd = subprocess.Popen(
    'VBoxManage list vms',
    shell=True,
    stdout=subprocess.PIPE
)
output = cmd.stdout
machines = {}
for line in output:
    m_id = line.split()[0].strip('"')
    m_name = m_id.replace('deployment_', '').split('_')[0]
    machines[m_name] = m_id

parser = ArgumentParser()
parser.add_argument(
    '-u',
    '--user',
    required=False,
    choices=users.keys(),
    default='discos'
)
parser.add_argument(
    'machine',
    choices=machines.keys()
)
args = parser.parse_args()

def machine_state(name):
    machine_id = machines[name]
    cmd = subprocess.Popen(
        'VBoxManage showvminfo "%s"' % machine_id,
        shell=True,
        stdout=subprocess.PIPE
    )
    for line in cmd.stdout:
        if 'State' in line:
            state = ' '.join(line.strip().split()[1:-2])
            return state

if machine_state(args.machine) == 'powered off':
    print 'Machine %s is not running.' % args.machine
else:
    IP = subprocess.Popen(
        (
            'VBoxManage guestproperty get %s /VirtualBox/GuestInfo/Net/1/V4/IP'
            % machines[args.machine]
        ),
        shell=True,
        stdout=subprocess.PIPE
    ).stdout.read().strip()
    if IP == 'No value set!':
        print 'Machine %s unreachable.' % args.machine
    else:
        remote_port = remote_starting_port + users[args.user]
        local_port = local_starting_port + users[args.user]
        IP = IP.split(' ')[1]
        ssh_command = (
            'ssh -L %d:localhost:%d -N -f -l %s %s'
            % (local_port, remote_port, args.user, IP)
        )
        subprocess.call(
            ssh_command,
            shell=True
        )
        subprocess.call(
            'vncviewer localhost:%d -fullscreen' % users[args.user],
            shell=True
        )
        subprocess.call(
            "pkill -f '%s'" % ssh_command,
            shell=True
        )
