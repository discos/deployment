#!/usr/bin/env python
"""Some command line examples:

  $ discos-vnc manager
  $ discos-vnc -u discos manager
  $ discos-vnc -u observer console
"""
from __future__ import print_function
import os
import subprocess
from multiprocessing import Process
from argparse import ArgumentParser
import deployment

remote_starting_port = 15000
local_starting_port = 15000
users = {
    'discos': 1,
    'observer': 2
}
machines = deployment.machineList()
try:
    machines.remove('storage')
except:
    pass

parser = ArgumentParser()
parser.add_argument(
    '-u',
    '--user',
    choices=users.keys(),
    default='discos',
    help='the username you wish to login with'
)
parser.add_argument(
    'machine',
    choices=machines,
    help='the machine you wish to login to'
)
parser.add_argument(
    '-f',
    '--fullscreen',
    action='store_true',
    default=False,
    help='starts the vncviewer in fullscreen mode'
)
args = parser.parse_args()

def detach(vnc_command, ssh_command):
    if os.fork() != 0:
        return

    subprocess.call(
        vnc_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )

    pkill_command = 'pkill -f "{}"'.format(' '.join(ssh_command))
    subprocess.call(
        pkill_command,
        shell=True
    )

if deployment.isRunning(args.machine):
    remote_port = remote_starting_port + users[args.user]
    local_port = local_starting_port
    found_open_port = False
    for _ in range(50):
        rc = subprocess.call(
            'netstat -an | grep 127.0.0.1:{}'.format(local_port),
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        if not rc:
            local_port += 1
        else:
            found_open_port = True
            break

    if not found_open_port:
        deployment.error('could not find an available port in range 15000-15050!')

    ip = deployment.getIp(args.machine)

    ssh_command = [
        'ssh',
        '-L',
        '{}:localhost:{}'.format(local_port, remote_port),
        '-N',
        '-f',
        '-C',
        '-l',
        args.user,
        ip
    ]
    subprocess.call(ssh_command)

    vnc_command = ['vncviewer', 'localhost:{}'.format(local_port)]
    if args.fullscreen:
        vnc_command.append('-fullscreen')

    p = Process(target=detach, args=(vnc_command, ssh_command))
    p.daemon = True
    p.start()
    p.join()
else:
    print('Machine {} is not running.'.format(args.machine))
