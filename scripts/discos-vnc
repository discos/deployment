#!/usr/bin/env python
"""Some command line examples:

  $ discos-vnc manager
  $ discos-vnc -u discos manager
  $ discos-vnc -u observer console
"""
from __future__ import print_function
import subprocess
import utils
from argparse import ArgumentParser

utils.checkPython()

remote_starting_port = 15000
local_starting_port = 5900
machine_starting_port = {
    'manager': 5900,
    'console': 5910
}
users = {
    'discos': 1,
    'observer': 2
}
machines = utils.machineList()
machines.remove('storage')

parser = ArgumentParser()
parser.add_argument(
    '-u',
    '--user',
    required=False,
    choices=users.keys(),
    default='discos'
)
parser.add_argument(
    'machine',
    choices=machines
)
args = parser.parse_args()

if utils.machineState(args.machine) == 'powered off':
    print('Machine {} is not running.'.format(args.machine))
else:
    remote_port = remote_starting_port + users[args.user]
    local_port = machine_starting_port[args.machine] + users[args.user]
    ip = utils.getIp(args.machine)

    ssh_command = [
        'ssh',
        '-L',
        '{}:localhost:{}'.format(local_port, remote_port),
        '-N',
        '-f',
        '-l',
        args.user,
        ip
    ]
    subprocess.call(ssh_command)

    vnc_index = local_port - local_starting_port
    vnc_command = ['vncviewer', 'localhost:{}'.format(vnc_index), '-fullscreen']
    subprocess.call(
        vnc_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )

    pkill_command = 'pkill -f "{}"'.format(' '.join(ssh_command))
    subprocess.call(
        pkill_command,
        shell=True
    )
