#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import shutil
import argparse
from urllib.request import Request, urlopen
from urllib.error import HTTPError
import json
if os.name == 'posix' and sys.version_info[0] < 3:
    import subprocess32 as subprocess
else:
    import subprocess

https_url = 'https://github.com/discos/discos.git'
ssh_url = 'git@github.com:discos/discos.git'

STATION = ''
try:
    with open('/{{ discos_sw_dir }}/config/misc/station', 'r') as f:
        STATION = f.read().strip().split('=')[-1]
except IOError:
    pass

BRANCH_ROOT = os.environ['HOME']
STATIONS = ['SRT', 'Medicina', 'Noto']
BRANCHES = []
try:
    request = Request(
        'https://api.github.com/repos/discos/discos/branches'
    )
    BRANCHES += json.loads(urlopen(request).read())
    request = Request(
        'https://api.github.com/repos/discos/discos/tags'
    )
    BRANCHES += json.loads(urlopen(request).read())
    BRANCHES = [str(item.get('name')) for item in BRANCHES]
    BRANCHES.sort()
except HTTPError:
    pass

parser = argparse.ArgumentParser()
parser.add_argument(
    'branch',
    type=str,
    choices=BRANCHES if BRANCHES else None,
    metavar='BRANCH',
    help=(
        'WARNING: remote DISCOS repository unreachable! '
        'Be sure to type the name of an existing branch if deploying!'
        if not BRANCHES else '\n'.join(BRANCHES)
    )
)
if not STATION:
    parser.add_argument(
        '-s',
        '--station',
        choices=STATIONS,
        metavar='STATION',
        required=True
    )
args = parser.parse_args()


os.chdir(BRANCH_ROOT)
if not STATION:
    branch_name = '%s-%s' % (args.branch, args.station.lower())
else:
    branch_name = args.branch
BRANCH_PATH = os.path.join(BRANCH_ROOT, branch_name)


# Clone the branch
try:
    code = subprocess.call(
        ['git',
        'clone',
        https_url,
        branch_name,
        '--branch',
        args.branch],
        timeout=120,
    )
except subprocess.TimeoutExpired:
    if os.path.exists(BRANCH_PATH):
        shutil.rmtree(BRANCH_PATH)
    print('\nERROR: timeout expired cloning %s.' % https_url)
    sys.stderr.flush()
    sys.exit(-1)
if code == 128:
    print(f'\nERROR: remote branch {branch_name} not found in upstream origin')
if code:
    sys.exit(code)
else:
    # Change the push url of the repository
    subprocess.call(
        ['git',
        'config',
        'remote.origin.pushurl',
        ssh_url],
        cwd=BRANCH_PATH
    )
    os.symlink(
        '/{{ discos_sw_dir }}/SlaLibrary',
        '%s/Common/Libraries/SlaLibrary' % BRANCH_PATH
    )
    print('Repository cloned into %s' % BRANCH_PATH)


# Create the introot inside /{{ discos_sw_dir }}/introots/
introot = os.path.join('/{{ discos_sw_dir }}/introots', branch_name)
code = subprocess.call(
    ['getTemplateForDirectory', 'INTROOT', introot],
    stdout=open(os.devnull, 'w'))
if code:
    sys.exit(code)
else:
    os.makedirs(os.path.join(introot, 'user/bin'))
    subprocess.call(['chmod', '-R', 'go-rwx', introot])
    subprocess.call(['chmod', 'go+x', introot])
    subprocess.call(['chmod', '-R', 'go+rx', os.path.join(introot, 'lib')])
    subprocess.call(['chmod', '-R', 'g+rx', os.path.join(introot, 'bin')])
    subprocess.call(['chmod', '-R', 'o+rx', os.path.join(introot, 'user')])
    if not STATION:
        # Create the .station file
        with open(os.path.join(introot, '.station'), 'w') as f:
            f.write('export STATION=%s' % args.station)
    print('Introot created into %s' % introot)


# Add the branch to the list of available branches
with open('/{{ discos_sw_dir }}/config/misc/branches', 'a+') as f:
    content = f.read()
    if not branch_name in content:
        f.write(branch_name + '\n')


# Set the active branch
if subprocess.call(['discos-set', branch_name]):
    sys.exit(code)
