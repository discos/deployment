---

- name: Create a temporary directory for the build
  file:
    path: "{{ remote_build_path }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0770
    recurse: True


- name: Check if ACS binaries exist in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ acs_dest.file }}"
  delegate_to: localhost
  run_once: True
  register: acs_bin


- name: Download {{ acs_dest.file }}
  get_url:
    url: "{{ remote_repository_download_url }}/{{ acs_dest.file }}_0{{ item }}"
    dest: "{{ local_repository_path }}"
    headers:
      Authorization: "token {{ repository_token }}"
  with_sequence: start=0 end=4
  when:
    - acs_bin.stat.exists == False
  delegate_to: localhost
  run_once: True


- name: Merge ACS part files
  shell: "cat {{ acs_dest.file }}_* >> {{ acs_dest.file }}"
  args:
    chdir: "{{ local_repository_path }}"
  when:
    - acs_bin.stat.exists == False
  delegate_to: localhost
  run_once: True


- name: Get rid of ACS part files
  file:
    path: "{{ local_repository_path }}/{{ acs_dest.file }}_0{{ item }}"
    state: absent
  with_sequence: start=0 end=4
  when:
    - acs_bin.stat.exists == False
  delegate_to: localhost
  run_once: True


- name: Check if ACS extprod exists in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ extprod_dest.file }}"
  delegate_to: localhost
  run_once: True
  register: extprod_bin


- name: Download {{ extprod_dest.file }}
  get_url:
    url: "{{ remote_repository_download_url }}/{{ extprod_dest.file }}_0{{ item }}"
    dest: "{{ local_repository_path }}"
    headers:
      Authorization: "token {{ repository_token }}"
  with_sequence: start=0 end=5
  when:
    - extprod_bin.stat.exists == False
  delegate_to: localhost
  run_once: True


- name: Merge ACS extprod part files
  shell: "cat {{ extprod_dest.file }}_* >> {{ extprod_dest.file }}"
  args:
    chdir: "{{ local_repository_path }}"
  when:
    - extprod_bin.stat.exists == False
  delegate_to: localhost
  run_once: True


- name: Get rid of ACS extprod part files
  file:
    path: "{{ local_repository_path }}/{{ extprod_dest.file }}_0{{ item }}"
    state: absent
  with_sequence: start=0 end=5
  when:
    - extprod_bin.stat.exists == False
  delegate_to: localhost
  run_once: True


- name: Check if ACS is already installed
  find:
    paths: /alma
    file_type: directory
    patterns: "ACS*"
  register: target_dir


- name: Copy {{ acs_dest.file }} to the remote
  copy:
    src: "{{ local_repository_path }}/{{ acs_dest.file }}"
    dest: "{{ remote_build_path }}"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  when: target_dir.matched|int == 0


- name: Copy {{ extprod_dest.file }} to the remote
  copy:
    src: "{{ local_repository_path }}/{{ extprod_dest.file }}"
    dest: "{{ remote_build_path }}"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
  when: target_dir.matched|int == 0


- name: Extract the ACS archives
  unarchive:
    src: "{{ remote_build_path }}/{{ item }}"
    dest: "{{ remote_build_path }}"
    remote_src: True
  with_items:
    - "{{ acs_dest.file }}"
    - "{{ extprod_dest.file }}"
  become: True
  become_user: "{{ user.name }}"
  when: target_dir.matched|int == 0


- name: Copy the ACS files to /
  command: "mv alma /"
  args:
    chdir: "{{ remote_build_path }}"
  when: target_dir.matched|int == 0


- name: Remove the directory used for the build
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_build_path }}"


################################
# Set the ACS user's environment
################################


- name: Copy the .acs dir from /alma to /{{ discos_sw_dir }}/config
  command: "{{ item }}"
  with_items:
    - "cp -r .acs /{{ discos_sw_dir }}/config/acs"
  become: True
  become_user: "{{ user.name }}"
  args:
    chdir: "{{ acssw }}/config"


- name: Create the acstmp directory
  file:
    path: "/service/acstmp/{{ inventory_hostname_short }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0755
    recurse: True


- name: Copy the acsStartContainer with debugger
  template:
    src: acsStartContainerGdb
    dest: "/alma/{{ acs_tag }}/ACSSW/bin/"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0755
  become: True
  become_user: "{{ user.name }}"


- name: Copy some system Python libraries into ACS path
  copy:
    src: "/usr/lib64/python2.7/lib-dynload/{{ item }}"
    dest: "/alma/{{ acs_tag }}/Python/lib/python2.7/lib-dynload/"
    remote_src: True
  with_items:
    - "bz2.so"
    - "_sqlite3.so"
  become: True
  become_user: "{{ user.name }}"


- name: Check in which path Java is installed
  shell: "readlink -f $(which java)"
  register: java_home


- name: Make sure /usr/java directory exists
  file:
    path: "/usr/java"
    state: directory


- name: Create a symlink to the correct Java home path, needed by ACS
  file:
    src: "{{ java_home.stdout | regex_replace('/jre/bin/java') }}"
    dest: "/usr/java/default"
    state: link


#########################
# Apply some patch to ACS
#########################

- include: "{{ patch_file }}"
  vars:
    params:
      files:
        - "patches/{{ acs_tag }}.yml"
  loop: "{{ q('first_found', params, errors='ignore') }}"
  loop_control:
    loop_var: patch_file


##################################
# Load ACS libraries to the system
##################################


- name: Add ACS libraries to ld.so configuration
  lineinfile:
    path: "/etc/ld.so.conf.d/acs.conf"
    line: "{{ item }}"
    state: present
    create: True
  with_items:
    - "/alma/{{ acs_tag }}/ACSSW/lib"
    - "/alma/{{ acs_tag }}/TAO/ACE_wrappers/build/linux/lib"
    - "/alma/{{ acs_tag }}/Python/lib"


- name: Load the ACS libraries to the system
  command: ldconfig


############################
# Remove the boost directory
############################


- name: Remove the ACS boost directory
  file:
    path: "/alma/{{ acs_tag }}/boost"
    state: absent
  become: True
  become_user: "{{ user.name }}"


# ACS source files from:
# http://git-dev.sco.alma.cl/cgit/ACS/
#
# ACS binaries from:
# http://webdav.sco.alma.cl/public/Releases/
