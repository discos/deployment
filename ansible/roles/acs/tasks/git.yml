---

- name: Make sure the git yum package is not installed
  yum:
    name: git
    state: absent


- name: Check if git has been installed
  stat:
    path: "{{ git_dir }}"
  register: git_exists


- name: Download Git
  get_url:
    url: "{{ git_orig.base }}v{{ git_orig.version }}{{ git_orig.extension }}"
    dest: "{{ local_repository_path }}/{{ git_dest.file }}"
  when: git_exists.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Clean the build directory
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_build_path }}"
  when: git_exists.stat.exists == False


- name: Create a temporary directory for the Git build
  file:
    path: "{{ remote_build_path }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0770
    recurse: yes
  when: git_exists.stat.exists == False


- name: Copy {{ git_dest.file }} to the remote
  copy:
    src: "{{ local_repository_path }}/{{ git_dest.file }}"
    dest: "{{ remote_build_path }}"
  when: git_exists.stat.exists == False


- name: Extract the Git archive
  unarchive:
    src: "{{ remote_build_path }}/{{ git_dest.file }}"
    dest: "{{ remote_build_path }}"
    remote_src: yes
  when: git_exists.stat.exists == False


- name: Install Git from sources
  command: "{{ item }}"
  with_items:
    - make prefix={{ git_dir }} all
    - make prefix={{ git_dir }} install
  args:
    chdir: "{{ remote_build_path }}/git-{{ git_orig.version }}"
  when: git_exists.stat.exists == False


- name: Add git to the PATH
  lineinfile:
    dest: /etc/profile
    line: 'export PATH=$PATH:{{ git_dir }}/bin'


- name: Remove the directory used for the build
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}"


- name: Install yum packages required for git autocompletion
  yum:
    name:
      - git-core
      - bash-completion
    state: present
