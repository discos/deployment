---

- name: Create a temporary directory for the libraries compilation
  file:
    path: "{{ remote_build_path }}"
    state: directory


#################################
# CFITSIO and CCFITS Installation
#################################

- name: Check if {{ cfitsio.file }} is installed
  stat:
    path: "/usr/local/include/fitsio.h"
  register: cfitsio_include


- name: Check if {{ ccfits.file }} is installed
  stat:
    path: "/usr/local/include/CCfits"
  register: ccfits_include


- name: Check if fitsviewer is installed
  stat:
    path: "/usr/local/bin/fv"
  register: fv_binary


- name: Check if the cfitsio sources exist in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ cfitsio.file }}"
  delegate_to: localhost
  run_once: true
  register: cfitsio_sources


- name: Check if the ccfits sources exist in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ ccfits.file }}"
  delegate_to: localhost
  run_once: true
  register: ccfits_sources


- name: Check if the fitsviewer binary exist in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ fv_file }}"
  delegate_to: localhost
  run_once: true
  register: fv_archive


- name: Download {{ cfitsio.file }}
  get_url:
    validate_certs: no
    url: "ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/{{ cfitsio.file }}"
    dest: "{{ local_repository_path }}"
  when:
    - cfitsio_include.stat.exists == False
    - cfitsio_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Download {{ ccfits.file }}
  get_url:
    validate_certs: no
    url: "http://heasarc.gsfc.nasa.gov/fitsio/CCfits-2.4/{{ ccfits.file }}"
    dest: "{{ local_repository_path }}"
  when:
    - ccfits_include.stat.exists == False
    - ccfits_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Download {{ fv_file }}
  get_url:
    validate_certs: no
    url: "http://heasarc.gsfc.nasa.gov/FTP/software/lheasoft/fv/{{ fv_file }}"
    dest: "{{ local_repository_path }}"
  when:
    - fv_binary.stat.exists == False
    - fv_archive.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ cfitsio.file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ cfitsio.file }}"
    dest: "{{ remote_build_path }}"
  when: cfitsio_include.stat.exists == False


- name: Install cfitsio
  command: "chdir={{ remote_build_path }}/{{ cfitsio.build_dir }} {{ item }}"
  with_items:
    - "./configure --prefix=/usr/local"
    - "make"
    - "make install"
  when: cfitsio_include.stat.exists == False


- name: Copy {{ ccfits.file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ ccfits.file }}"
    dest: "{{ remote_build_path }}"
  when: ccfits_include.stat.exists == False


- name: Install CCfits
  command: "chdir={{ remote_build_path }}/{{ ccfits.build_dir }} {{ item }}"
  with_items:
    - "./configure --prefix=/usr/local"
    - "make"
    - "make install"
  when: ccfits_include.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_build_path }}/{{ cfitsio.build_dir }}"
    - "{{ remote_build_path }}/{{ ccfits.build_dir }}"


- name: Copy {{ fv_file }} to the remote /usr/local/lib
  unarchive:
    src: "{{ local_repository_path }}/{{ fv_file }}"
    dest: "/usr/local/lib"
  when: fv_binary.stat.exists == False


- lineinfile:
    path: /usr/local/bin/fv
    line: '/usr/local/lib/fv5.4/fv'
    mode: 0755
    state: present
    create: yes
  when: fv_binary.stat.exists == False


#####################
# MODBUS Installation
#####################

- name: Check if {{ modbus.file }} is installed
  stat:
    path: "/usr/local/lib/libmodbus.so"
  register: modbus_lib


- name: "Check if the modbus sources exist in the local repository"
  stat:
    path: "{{ local_repository_path }}/{{ modbus.file }}"
  delegate_to: localhost
  run_once: true
  register: modbus_sources


- name: Download modbus (if it does not exist in the local repo)
  get_url:
    validate_certs: no
    url: "http://libmodbus.org/releases/{{ modbus.file }}"
    dest: "{{ local_repository_path }}"
  when:
    - modbus_sources.stat.exists == False
    - modbus_lib.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ modbus.file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ modbus.file }}"
    dest: "{{ remote_build_path }}"
  when: modbus_lib.stat.exists == False


- name: Install modbus
  command: "chdir={{ remote_build_path }}/{{ modbus.build_dir }} {{ item }}"
  with_items:
    - "./configure --prefix=/usr/local"
    - "make"
    - "make install"
  when: modbus_lib.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_build_path }}/{{ modbus.build_dir }}"


##############################
# GMOCK and GTEST Installation
##############################

- name: Check if gmock is installed
  stat:
    path: "/usr/local/include/gmock"
  register: gmock_lib


- name: Check if the {{ googletest_file }}  exists in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ googletest_file }}"
  delegate_to: localhost
  run_once: true
  register: gmock_sources


- name: Download {{ googletest_file }}
  get_url:
    validate_certs: no
    url: "https://github.com/google/googletest/archive/{{ googletest_repo }}.zip"
    dest: "{{ local_repository_path }}/{{ googletest_file }}"
  when:
    - gmock_lib.stat.exists == False
    - gmock_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ googletest_file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ googletest_file }}"
    dest: "{{ remote_build_path }}"
  when: gmock_lib.stat.exists == False


- name: Create a gmock/build directory
  file:
    path: "{{ gmock_build }}/build"
    state: directory
  when: gmock_lib.stat.exists == False


- name: Compile gmock
  command: "chdir={{ gmock_build }}/build {{ item }}"
  with_items:
    - 'cmake ..'
    - 'make'
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/build/libgmock.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/build/libgmock_main.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- name: Copy the gmock static libraries to /usr/local/lib
  command: "chdir={{ gmock_build }}/{{ item.subdir }} {{ item.cmd }}"
  with_items:
    - { cmd: 'cp -r gmock /usr/local/include', subdir: 'include' }
    - { cmd: 'cp libgmock.a /usr/local/lib', subdir: 'build' }
    - { cmd: 'cp libgmock_main.a /usr/local/lib', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- name: Check if gtest is installed
  stat:
    path: "/usr/local/include/gtest"
  register: gtest_lib


- name: Create the gtest build directory
  file:
    path: "{{ gtest_build }}/build"
    state: directory
  when: gtest_lib.stat.exists == False


- name: Compile gtest
  command: "{{ item }}"
  args:
    chdir: "{{ gtest_build }}/build"
  with_items:
    - 'cmake ..'
    - 'make'
  when: gtest_lib.stat.exists == False


- file:
    path: "{{ gtest_build }}/build/libgtest.a"
    mode: "a+x"
  when: gtest_lib.stat.exists == False


- file:
    path: "{{ gtest_build }}/build/libgtest_main.a"
    mode: "a+x"
  when: gtest_lib.stat.exists == False


- name: Copy the gtest static libraries to /usr/local
  command: "chdir={{ gtest_build }}/{{ item.subdir }} {{ item.cmd }}"
  with_items:
    - { cmd: 'cp -r gtest /usr/local/include', subdir: 'include' }
    - { cmd: 'cp libgtest.a /usr/local/lib', subdir: 'build' }
    - { cmd: 'cp libgtest_main.a /usr/local/lib', subdir: 'build' }
  when: gtest_lib.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_build_path }}/{{ googletest_build_dir }}"


#####
# f2c
#####

- name: Check if f2c is installed
  stat:
    path: "/usr/local/include/f2c.h"
  register: f2c_header

- name: Check if the f2c sources exist in the local repository
  stat:
    path: "{{ local_repository_path }}/f2c.zip"
  delegate_to: localhost
  run_once: true
  register: f2c_sources


- name: Download f2c
  get_url:
    validate_certs: no
    url: "https://github.com/barak/f2c/archive/master.zip"
    dest: "{{ local_repository_path }}/f2c.zip"
  when:
    - f2c_header.stat.exists == False
    - f2c_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy f2c to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/f2c.zip"
    dest: "{{ remote_build_path }}"
  when: f2c_header.stat.exists == False


- name: Install f2c
  command: "chdir={{ remote_build_path }}/f2c-master/src {{ item }}"
  with_items:
    - "cp makefile.u Makefile"
    - "make"
    - "cp f2c.h /usr/local/include"
    - "cp f2c /usr/local/bin"
  when: f2c_header.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_build_path }}/f2c-master"


#######################
# QT AND PYQT LIBRARIES
#######################

- name: Increment the process stack size in order to compile AS GUI
  pam_limits:
    domain: "{{ user }}"
    limit_type: '-'
    limit_item: stack
    value: 65532


- name: Verify the Qt library is not installed
  yum:
    name:
      - "qt"
      - "qt-devel"
      - "qt4"
    state: absent
  register: result
  retries: 2
  until: result is succeeded


- name: Check if {{ qt_lib }} exists
  stat:
    path: "{{ qt_lib }}"
  register: qt_library


- name: Check if the {{ qt_file }}  exists in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ qt_file }}"
  delegate_to: localhost
  run_once: true
  register: qt_sources


- name: Download {{ qt_file }}
  get_url:
    validate_certs: no
    url: "{{ qt_url }}"
    dest: "{{ local_repository_path }}"
  when:
    - qt_library.stat.exists == False
    - qt_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ qt_file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ qt_file }}"
    dest: "{{ remote_build_path }}"
  when: qt_library.stat.exists == False


- name: No license confirmation prompt during installation
  replace:
    dest: "{{ remote_build_path }}/{{ qt_build_dir }}/configure"
    regexp: "OPT_CONFIRM_LICENSE=no"
    replace: "OPT_CONFIRM_LICENSE=yes"
  when: qt_library.stat.exists == False


- name: Install Qt
  command: "chdir={{ remote_build_path }}/{{ qt_build_dir }} {{ item }}"
  with_items:
    - "./configure -no-openssl -opensource --prefix=/usr/local/{{ qt_version }}"
    - "gmake"
    - "gmake install"
  become: true
  when: qt_library.stat.exists == False


- name: Verify the sip library is not installed
  yum:
    name: sip
    state: absent


- name: Check if sip is installed
  stat:
    path: "/alma/{{ acs_tag }}/Python/lib/python2.7/site-packages/sip.so"
  register: sip_library


- name: Check if the {{ sip_file }}  exists in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ sip_file }}"
  delegate_to: localhost
  run_once: true
  register: sip_sources


- name: Download {{ sip_file }}
  get_url:
    validate_certs: no
    url: "{{ sip_url }}"
    dest: "{{ local_repository_path }}"
  when:
    - sip_library.stat.exists == False
    - sip_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ sip_file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ sip_file }}"
    dest: "{{ remote_build_path }}"
  when: sip_library.stat.exists == False


- name: Change the {{ pyqt_build_dir }} permissions
  file:
    path: "{{ remote_build_path }}/{{ sip_build_dir }}"
    state: directory
    recurse: yes
    owner: "{{ user }}"
    group: acs
    mode: 0755


- name: Install sip
  command: "chdir={{ remote_build_path }}/{{ sip_build_dir }} {{ item }}"
  with_items:
    - "python configure.py"
    - "make"
    - "make install"
  become: true
  become_user: "{{ user }}"
  become_flags: "-i"
  when: sip_library.stat.exists == False


- name: Verify the PyQt4 library is not installed
  yum:
    name: PyQt4
    state: absent


- name: Check if PyQt is installed
  stat:
    path: "/alma/{{ acs_tag }}/Python/lib/python2.7/site-packages/PyQt4/__init__.py"
  register: pyqt_library


- name: Check if the {{ pyqt_file }}  exists in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ pyqt_file }}"
  delegate_to: localhost
  run_once: true
  register: pyqt_sources


- name: Download {{ pyqt_file }}
  get_url:
    validate_certs: no
    url: "{{ pyqt_url }}"
    dest: "{{ local_repository_path }}"
  when:
    - pyqt_library.stat.exists == False
    - pyqt_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ pyqt_file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ pyqt_file }}"
    dest: "{{ remote_build_path }}"
  when: pyqt_library.stat.exists == False


- name: Change the {{ pyqt_build_dir }} permissions
  file:
    path: "{{ remote_build_path }}/{{ pyqt_build_dir }}"
    state: directory
    recurse: yes
    owner: "{{ user }}"
    group: acs
    mode: 0755


- name: Configure PyQt
  command: "chdir={{ remote_build_path }}/{{ pyqt_build_dir }} {{ item }}"
  with_items:
    - "python configure.py --confirm-license --qmake /usr/local/{{ qt_version }}/bin/qmake"
  become: true
  become_user: "{{ user }}"
  become_flags: "-i"
  when: pyqt_library.stat.exists == False


- name: Remove PrintCurrentPage from source files
  lineinfile:
    dest: "{{ item }}"
    state: absent
    regexp: "^.*PrintCurrentPage.*$"
  with_items:
    - "{{ remote_build_path }}/{{ pyqt_build_dir }}/QtGui/sipAPIQtGui.h"
    - "{{ remote_build_path }}/{{ pyqt_build_dir }}/QtGui/sipQtGuiQAbstractPrintDialog.cpp"
    - "{{ remote_build_path }}/{{ pyqt_build_dir }}/sip/QtGui/qabstractprintdialog.sip"
  become: true
  become_user: "{{ user }}"
  when: pyqt_library.stat.exists == False


- name: Install PyQt
  command: "chdir={{ remote_build_path }}/{{ pyqt_build_dir }} {{ item }}"
  with_items:
    - "make"
    - "make install"
  become: true
  become_user: "{{ user }}"
  when: pyqt_library.stat.exists == False


- name: Check if PyQwt is installed
  stat:
    path: "/alma/{{ acs_tag }}/Python/lib/python2.7/site-packages/PyQt4/Qwt5/__init__.py"
  register: pyqwt_library


- name: Check if the {{ pyqwt_file }}  exists in the local repository
  stat:
    path: "{{ local_repository_path }}/{{ pyqwt_file }}"
  delegate_to: localhost
  run_once: true
  register: pyqwt_sources


- name: Download {{ pyqwt_file }}
  get_url:
    validate_certs: no
    url: "{{ pyqwt_url }}"
    dest: "{{ local_repository_path }}"
  when:
    - pyqwt_library.stat.exists == False
    - pyqwt_sources.stat.exists == False
  delegate_to: localhost
  run_once: true


- name: Copy {{ pyqwt_file }} to the remote {{ remote_build_path }}
  unarchive:
    src: "{{ local_repository_path }}/{{ pyqwt_file }}"
    dest: "{{ remote_build_path }}"
  when: pyqwt_library.stat.exists == False


- name: Change the {{ pyqwt_build_dir }} permissions
  file:
    path: "{{ remote_build_path }}/{{ pyqwt_build_dir }}"
    state: directory
    recurse: yes
    owner: "{{ user }}"
    group: acs
    mode: 0755


- name: Configure PyQwt
  command: "chdir={{ remote_build_path }}/{{ pyqwt_build_dir }}/configure {{ item }}"
  with_items:
    - "python configure.py -Q ../qwt-5.2"
  become: true
  become_user: "{{ user }}"
  become_flags: "-i"
  when: pyqwt_library.stat.exists == False


- name: Install PyQwt
  command: "chdir={{ remote_build_path }}/{{ pyqwt_build_dir }}/configure {{ item }}"
  with_items:
    - "make"
    - "make install"
  become: true
  become_user: "{{ user }}"
  when: pyqwt_library.stat.exists == False


- name: Remove the temporary directory used for libraries compilation
  file:
    path: "{{ remote_build_path }}"
    state: absent


#################
# PYTHON PACKAGES
#################

- name: Install some third-party Python packages
  command: "{{ item }}"
  with_items:
    - "pip install mock==1.1.1"
    - "pip install jinja2"
    - "pip install subprocess32"
    - "pip install pyfits"
  become: true
  become_user: "{{ user }}"
  become_flags: "-i"


#########################
# COMPONENTS REQUIREMENTS
#########################

- name: Increment the maximum number of user processes in order to run the AS
  pam_limits:
    domain: "{{ user }}"
    limit_type: '-'
    limit_item: nproc
    value: 63266
