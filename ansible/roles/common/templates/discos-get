#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import argparse
import subprocess

import jinja2


BRANCH_ROOT = os.path.join('/home', '{{ user }}')


parser = argparse.ArgumentParser()
parser.add_argument(
    '-u',
    '--user',
    help='GihHub user name',
    required=False,
    default='marco-buttu')
parser.add_argument('branch')
parser.add_argument(
    '-s',
    '--station',
    choices=('srt', 'medicina', 'noto'),
    required=False)

args = parser.parse_args()

class CustomArgs:
    pass

cargs = CustomArgs()
cargs.repo = 'https://github.com/%s/discos.git' % args.user
cargs.branch = args.branch

if args.branch != 'master':
    lower_branch = args.branch.lower()
    if 'srt' in lower_branch:
        cargs.station = 'SRT'
        if args.station and 'SRT' not in args.station:
            parser.error(
                'mismatch between -s %s and -b %s'
                % (args.branch, args.station))
    elif 'medicina' in lower_branch:
        cargs.station = 'Medicina'
        if args.station and 'Medicina' not in args.station:
            parser.error(
                'mismatch between -s %s and -b %s'
                % (args.branch, args.station))
    elif 'noto' in lower_branch:
        cargs.station = 'Noto'
        if args.station and 'Noto' not in args.station:
            parser.error(
                'mismatch between -s %s and -b %s'
                % (args.branch, args.station))
    else:
        parser.error('invalid branch name.')
else:
    if not args.station:
        parser.error('-s is required when -b is master.')
    else:
        cargs.station = args.station


os.chdir(BRANCH_ROOT)
BRANCH_PATH = os.path.join(BRANCH_ROOT, cargs.branch)

# Clone the branch
code = subprocess.call([
    'git',
    'clone',
    cargs.repo,
    cargs.branch,
    '--branch',
    cargs.branch,
    '--single-branch'])
if code:
    sys.exit(code)
else:
    print('Repository cloned into %s' % BRANCH_PATH)

# Create the introot inside the branch
introot_name = 'introot'
introot = os.path.join(BRANCH_PATH, introot_name)
code = subprocess.call(
    ['getTemplateForDirectory', 'INTROOT', introot],
    stdout=open(os.devnull, 'w'))
if code:
    sys.exit(code)
else:
    print('Introot created into %s' % BRANCH_PATH)

# Render the branchenv template and copy it inside the branch
def render(template_path, context, dest_path):
    path, file_name = os.path.split(template_path)
    rendered_template = jinja2.Environment(
        loader=jinja2.FileSystemLoader(path or './')
    ).get_template(file_name).render(context)
    with open(dest_path, 'w') as f:
        f.write(rendered_template)

context = {
    'introot': introot,
    'branch_path': BRANCH_PATH,
    'station': cargs.station,
}
template_path = '{{ discosconf_dir }}/templates/branchenv'
dest_path = '%s/.branchenv' % BRANCH_PATH
render(template_path, context, dest_path)


# Set the DISCOS_BRANCH environment variable
lines = []
load_branch = '{{ discosconf_dir }}/load_branch'
for line in open(load_branch):
    if 'export DISCOS_BRANCH=' in line:
        lines.append('export DISCOS_BRANCH=%s\n' % cargs.branch)
    else:
        lines.append(line)
open(load_branch, 'w').writelines(lines)


# Add the branch to the list of available branches
with open('{{ discosconf_dir }}/branches', 'a+') as f:
    content = f.read()
    if not cargs.branch in content:
        f.write(cargs.branch + '\n')
