#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import shutil
import argparse
if os.name == 'posix' and sys.version_info[0] < 3:
    import subprocess32 as subprocess
else:
    import subprocess

import jinja2


BRANCH_ROOT = os.environ['HOME']
STATIONS = ('SRT', 'Medicina', 'Noto')


parser = argparse.ArgumentParser()
parser.add_argument('branch')
parser.add_argument(
    '-s',
    '--station',
    choices=[s.lower() for s in STATIONS],
    required=False)
args = parser.parse_args()

class CustomArgs:
    pass

cargs = CustomArgs()
cargs.repo = 'https://{{ ghtoken }}@github.com/discos/discos.git'

station_branch = False
for station in STATIONS:
    if station.lower() in args.branch:
        station_branch = True
        break

if station_branch:
    lower_branch = args.branch.lower()
    for station in STATIONS:
        if station.lower() in lower_branch:
            cargs.station = station
            if args.station and station.lower() not in args.station:
                parser.error(
                    'mismatch between -s %s and -b %s'
                    % (args.branch, args.station))
            break
    else:
        parser.error('invalid branch name.')
else:
    if not args.station:
        parser.error('-s is required for branch %s.' % args.branch)
    else:
        for station in STATIONS:
            if station.lower() == args.station:
                cargs.station = station
                break


os.chdir(BRANCH_ROOT)
if not station_branch:
    branch_name = '%s-%s' % (args.branch, args.station)
else:
    branch_name = args.branch
BRANCH_PATH = os.path.join(BRANCH_ROOT, branch_name)

# Clone the branch
try:
    code = subprocess.call([
        'git',
        'clone',
        cargs.repo,
        branch_name,
        '--branch',
        args.branch,
        '--single-branch'],
        timeout=60)
except subprocess.TimeoutExpired:
    if os.path.exists(BRANCH_PATH):
        shutil.rmtree(BRANCH_PATH)
    print('\nERROR: timeout expired cloning %s.' % cargs.repo)
    sys.stderr.flush()
    sys.exit(-1)
if code:
    sys.exit(code)
else:
    print('Repository cloned into %s' % BRANCH_PATH)

# Remove the old origin, because it contains the token,
# and add a new plain one
os.chdir(BRANCH_PATH)
subprocess.call(['git', 'remote', 'rm', 'origin'])
subprocess.call([
    'git',
    'remote',
    'add',
    'origin',
    'https://github.com/discos/discos.git'])

# Create the introot inside /discos/introots/
introot = os.path.join('/discos/introots', branch_name)
code = subprocess.call(
    ['getTemplateForDirectory', 'INTROOT', introot],
    stdout=open(os.devnull, 'w'))
if code:
    sys.exit(code)
else:
    print('Introot created into %s' % introot)

# Create the .station file
with open(os.path.join(introot, '.station'), 'w') as f:
    f.write(cargs.station)

# Add the branch to the list of available branches
with open('/discos/config/discos/branches', 'a+') as f:
    content = f.read()
    if not branch_name in content:
        f.write(branch_name + '\n')


# Set the active branch
if subprocess.call(['discos-set', branch_name]):
    sys.exit(code)
