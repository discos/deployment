---

#################################
# CFITSIO and CCFITS Installation
#################################

- set_fact:
    cfitsio: { file: 'cfitsio3370.tar.gz', build_dir: 'cfitsio' }
    ccfits: { file: 'CCfits-2.4.tar.gz', build_dir: 'CCfits' }


- name: Check if {{ cfitsio.file }} is installed
  stat: path=/usr/local/include/fitsio.h
  register: cfitsio_include


- name: Check if {{ ccfits.file }} is installed
  stat: path=/usr/local/include/CCfits
  register: ccfits_include


- name: Check if the cfitsio sources exist in the local repository
  stat: path={{ local_repository_path }}/lib/{{ cfitsio.file }}
  delegate_to: 127.0.0.1
  register: cfitsio_sources


- name: Check if the ccfits sources exist in the local repository
  stat: path={{ local_repository_path }}/lib/{{ ccfits.file }}
  delegate_to: 127.0.0.1
  register: ccfits_sources


- name: Download {{ cfitsio.file }}
  get_url:
    url: ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/{{ cfitsio.file }}
    dest: "{{ local_repository_path }}/lib"
  when:
    - cfitsio_include.stat.exists == False
    - cfitsio_sources.stat.exists == False
  delegate_to: 127.0.0.1


- name: Download {{ ccfits.file }}
  get_url:
    url: http://heasarc.gsfc.nasa.gov/fitsio/CCfits-2.4/{{ ccfits.file }}
    dest: "{{ local_repository_path }}/lib"
  when:
    - ccfits_include.stat.exists == False
    - ccfits_sources.stat.exists == False
  delegate_to: 127.0.0.1


- name: Create a temporary directory for the libraries compilation
  file: path={{ remote_build_path }} state=directory


- name: Copy {{ cfitsio.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/lib/{{ cfitsio.file }}
    dest={{ remote_build_path }}
  when: cfitsio_include.stat.exists == False


- name: Install cfitsio
  command: chdir={{ remote_build_path }}/{{ cfitsio.build_dir }} {{ item }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - sudo make install
  when: cfitsio_include.stat.exists == False


- name: Copy {{ ccfits.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/lib/{{ ccfits.file }}
    dest={{ remote_build_path }}
  when: ccfits_include.stat.exists == False


- name: Install CCfits
  command: chdir={{ remote_build_path }}/{{ ccfits.build_dir }} {{ item }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - sudo make install
  when: ccfits_include.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}/{{ cfitsio.build_dir }}"
    - "{{ remote_build_path }}/{{ ccfits.build_dir }}"



#####################
# MODBUS Installation
#####################

- set_fact:
    modbus: { file: 'libmodbus-3.0.6.tar.gz', build_dir: 'libmodbus-3.0.6' }


- name: Check if {{ modbus.file }} is installed
  stat: path=/usr/local/lib/libmodbus.so
  register: modbus_lib


- name: "Check if the modbus sources exist in the local repository"
  stat: path={{ local_repository_path }}/lib/{{ modbus.file }}
  delegate_to: 127.0.0.1
  register: modbus_sources


- name: Download modbus (if it does not exist in the local repo)
  get_url:
    url: http://libmodbus.org/releases/{{ modbus.file }}
    dest: "{{ local_repository_path }}/lib"
  when:
    - modbus_sources.stat.exists == False
    - modbus_lib.stat.exists == False
  delegate_to: 127.0.0.1


- name: Create a temporary directory for the libraries compilation
  file: path={{ remote_build_path }} state=directory


- name: Copy {{ modbus.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/lib/{{ modbus.file }}
    dest={{ remote_build_path }}
  when: modbus_lib.stat.exists == False


- name: Install modbus
  command: chdir={{ remote_build_path }}/{{ modbus.build_dir }} {{ item }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - sudo make install
  when: modbus_lib.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}/{{ modbus.build_dir }}"



####################
# GMOCK Installation
####################

- set_fact:
    gmock: { file: 'gmock-1.7.0-master.zip', build_dir: 'gmock-1.7.0-master' }

- set_fact:
    gmock_build: "{{ remote_build_path }}/{{ gmock.build_dir }}"


- name: Check if {{ gmock.file }} is installed
  stat: path=/usr/local/lib/gmock
  register: gmock_lib


- name: Check if the {{ gmock.file }}  exists in the local repository
  stat: path={{ local_repository_path }}/lib/{{ gmock.file }}
  delegate_to: 127.0.0.1
  register: gmock_sources


- name: Download {{ gmock.file }}
  get_url:
    url: https://github.com/paulsapps/gmock-1.7.0/archive/master.zip
    dest: "{{ local_repository_path }}/lib"
  when:
    - gmock_lib.stat.exists == False
    - gmock_sources.stat.exists == False
  delegate_to: 127.0.0.1


- name: Create a temporary directory for the libraries compilation
  file: path={{ remote_build_path }} state=directory


- name: Copy {{ gmock.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/lib/{{ gmock.file }}
    dest={{ remote_build_path }}
  when: gmock_lib.stat.exists == False


- name: Create a gmock/build directory
  file: path={{ remote_build_path }}/{{ gmock.build_dir }}/build state=directory


- name: Compile gmock
  command: chdir={{ gmock_build }}/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'mkdir -p build', subdir: '' }
    - { cmd: 'cmake ..', subdir: 'build' }
    - { cmd: 'make', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/build/libgmock.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/build/libgmock_main.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- name: Copy the gmock static libraries to /usr/local/lib
  become: true
  command: chdir={{ gmock_build }}/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'cp -r gmock /usr/local/lib', subdir: 'include' }
    - { cmd: 'cp libgmock.a /usr/local/lib', subdir: 'build' }
    - { cmd: 'cp libgmock_main.a /usr/local/lib', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- name: Compile gtest
  command: chdir={{ gmock_build }}/gtest/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'mkdir -p build', subdir: '' }
    - { cmd: 'cmake ..', subdir: 'build' }
    - { cmd: 'make', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/gtest/build/libgtest.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/gtest/build/libgtest_main.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- name: Copy the gtest static libraries to /usr/local/lib
  become: true
  command: chdir={{ gmock_build }}/gtest/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'cp -r gtest /usr/local/lib', subdir: 'include' }
    - { cmd: 'cp libgtest.a /usr/local/lib', subdir: 'build' }
    - { cmd: 'cp libgtest_main.a /usr/local/lib', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- name: Remove the directory used for the libraries compilation
  become: True
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}"



##############################
# PYTHON Packages Installation
##############################

# Pay attention, we need to install all the python packages
# under the ACS environment. This means we first need
# to load the ACS environment, and then we can install
# all these packages. Also, I think all this is not
# required, because Python 2.7, shipped with ACS, already
# has unittest and pip.

- name: Verify pip is installed
  command: pip --version
  register: pip_installed
  ignore_errors: True


- name: "Install the Python package manager"
  become: true
  shell: "{{ item }}"
  with_items:
    - wget https://bootstrap.pypa.io/get-pip.py
    - python get-pip.py
    - rm get-pip.py
  when: pip_installed|failed


- name: "Install some third-party Python packages"
  become: true
  shell: "{{ item }}"
  with_items:
    - pip install unittest2
