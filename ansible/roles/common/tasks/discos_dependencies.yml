---

#################################
# CFITSIO and CCFITS Installation
#################################

- name: Check if {{ cfitsio.file }} is installed
  stat: path=/usr/local/include/fitsio.h
  register: cfitsio_include


- name: Check if {{ ccfits.file }} is installed
  stat: path=/usr/local/include/CCfits
  register: ccfits_include


- name: Check if the cfitsio sources exist in the local repository
  stat: path={{ local_repository_path }}/{{ cfitsio.file }}
  delegate_to: 127.0.0.1
  register: cfitsio_sources


- name: Check if the ccfits sources exist in the local repository
  stat: path={{ local_repository_path }}/{{ ccfits.file }}
  delegate_to: 127.0.0.1
  register: ccfits_sources


- name: Download {{ cfitsio.file }}
  get_url:
    validate_certs: no
    url: ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/{{ cfitsio.file }}
    dest: "{{ local_repository_path }}"
  when:
    - cfitsio_include.stat.exists == False
    - cfitsio_sources.stat.exists == False
  delegate_to: 127.0.0.1


- name: Download {{ ccfits.file }}
  get_url:
    validate_certs: no
    url: http://heasarc.gsfc.nasa.gov/fitsio/CCfits-2.4/{{ ccfits.file }}
    dest: "{{ local_repository_path }}"
  when:
    - ccfits_include.stat.exists == False
    - ccfits_sources.stat.exists == False
  delegate_to: 127.0.0.1


- name: Create a temporary directory for the libraries compilation
  file: path={{ remote_build_path }} state=directory


- name: Copy {{ cfitsio.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/{{ cfitsio.file }}
    dest={{ remote_build_path }}
  when: cfitsio_include.stat.exists == False


- name: Install cfitsio
  command: chdir={{ remote_build_path }}/{{ cfitsio.build_dir }} {{ item }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - sudo make install
  when: cfitsio_include.stat.exists == False


- name: Copy {{ ccfits.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/{{ ccfits.file }}
    dest={{ remote_build_path }}
  when: ccfits_include.stat.exists == False


- name: Install CCfits
  command: chdir={{ remote_build_path }}/{{ ccfits.build_dir }} {{ item }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - sudo make install
  when: ccfits_include.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}/{{ cfitsio.build_dir }}"
    - "{{ remote_build_path }}/{{ ccfits.build_dir }}"



#####################
# MODBUS Installation
#####################

- name: Check if {{ modbus.file }} is installed
  stat: path=/usr/local/lib/libmodbus.so
  register: modbus_lib


- name: "Check if the modbus sources exist in the local repository"
  stat: path={{ local_repository_path }}/{{ modbus.file }}
  delegate_to: 127.0.0.1
  register: modbus_sources


- name: Download modbus (if it does not exist in the local repo)
  get_url:
    validate_certs: no
    url: http://libmodbus.org/releases/{{ modbus.file }}
    dest: "{{ local_repository_path }}"
  when:
    - modbus_sources.stat.exists == False
    - modbus_lib.stat.exists == False
  delegate_to: 127.0.0.1


- name: Create a temporary directory for the libraries compilation
  file: path={{ remote_build_path }} state=directory


- name: Copy {{ modbus.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/{{ modbus.file }}
    dest={{ remote_build_path }}
  when: modbus_lib.stat.exists == False


- name: Install modbus
  command: chdir={{ remote_build_path }}/{{ modbus.build_dir }} {{ item }}
  with_items:
    - ./configure --prefix=/usr/local
    - make
    - sudo make install
  when: modbus_lib.stat.exists == False


- name: Remove the directory used for the libraries compilation
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}/{{ modbus.build_dir }}"



####################
# GMOCK Installation
####################

- name: Check if {{ gmock.file }} is installed
  stat: path=/usr/local/lib/gmock
  register: gmock_lib


- name: Check if the {{ gmock.file }}  exists in the local repository
  stat: path={{ local_repository_path }}/{{ gmock.file }}
  delegate_to: 127.0.0.1
  register: gmock_sources


- name: Download {{ gmock.file }}
  get_url:
    validate_certs: no
    url: https://github.com/paulsapps/gmock-1.7.0/archive/master.zip
    dest: "{{ local_repository_path }}/{{ gmock.file }}"
  when:
    - gmock_lib.stat.exists == False
    - gmock_sources.stat.exists == False
  delegate_to: 127.0.0.1


- name: Create a temporary directory for the libraries compilation
  file: path={{ remote_build_path }} state=directory


- name: Copy {{ gmock.file }} to the remote {{ remote_build_path }}
  unarchive:
    src={{ local_repository_path }}/{{ gmock.file }}
    dest={{ remote_build_path }}
  when: gmock_lib.stat.exists == False


- name: Create a gmock/build directory
  file: path={{ remote_build_path }}/{{ gmock.build_dir }}/build state=directory


- name: Compile gmock
  command: chdir={{ gmock_build }}/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'mkdir -p build', subdir: '' }
    - { cmd: 'cmake ..', subdir: 'build' }
    - { cmd: 'make', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/build/libgmock.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/build/libgmock_main.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- name: Copy the gmock static libraries to /usr/local/lib
  become: true
  command: chdir={{ gmock_build }}/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'cp -r gmock /usr/local/lib', subdir: 'include' }
    - { cmd: 'cp libgmock.a /usr/local/lib', subdir: 'build' }
    - { cmd: 'cp libgmock_main.a /usr/local/lib', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- name: Compile gtest
  command: chdir={{ gmock_build }}/gtest/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'mkdir -p build', subdir: '' }
    - { cmd: 'cmake ..', subdir: 'build' }
    - { cmd: 'make', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/gtest/build/libgtest.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- file:
    path: "{{ gmock_build }}/gtest/build/libgtest_main.a"
    mode: "a+x"
  when: gmock_lib.stat.exists == False


- name: Copy the gtest static libraries to /usr/local/lib
  become: true
  command: chdir={{ gmock_build }}/gtest/{{ item.subdir }} {{ item.cmd }}
  with_items:
    - { cmd: 'cp -r gtest /usr/local/lib', subdir: 'include' }
    - { cmd: 'cp libgtest.a /usr/local/lib', subdir: 'build' }
    - { cmd: 'cp libgtest_main.a /usr/local/lib', subdir: 'build' }
  when: gmock_lib.stat.exists == False


- name: Remove the directory used for the libraries compilation
  become: True
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}"


- name: Install some third-party Python packages
  become: true
  become_user: "{{ user }}"
  become_flags: "-i"
  command: "{{ item }}"
  with_items:
    - pip install mock==1.1.1
    - pip install jinja2
    - pip install subprocess32



####################
# DISCOS ENVIRONMENT
####################

- name: Create the DISCOS conf directory
  become: True
  file:
    path: "{{ discosconf_dir }}"
    state: directory
    owner: "{{ user }}"
    group: acs
    mode: 0770
    recurse: yes


- name: Create the DISCOS template directory
  become: True
  file:
    path: "{{ discosconf_dir }}/templates"
    state: directory
    owner: "{{ user }}"
    group: acs
    mode: 0770
    recurse: yes


- name: Create a the branches file
  become: True
  become_user: "{{ user }}"
  file: path={{ discosconf_dir }}/branches state=touch


- name: Copy the load_branch template
  become: True
  become_user: "{{ user }}"
  template:
    src: load_branch
    dest: "{{ discosconf_dir }}"
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes


- name: Copy prompt_command.sh 
  become: True
  become_user: "{{ user }}"
  template:
    src: prompt_command.sh
    dest: "{{ discosconf_dir }}"
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes


- name: Copy the branchenv template
  become: True
  become_user: "{{ user }}"
  copy:
    src: "{{ role_path }}/templates/branchenv"
    dest: "{{ discosconf_dir }}/templates/branchenv"
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes


- name: Render the discos-get template
  become: True
  template:
    src: discos-get
    dest: /usr/bin
    mode: 0755
    force: yes


- name: Render the discos-set template
  become: True
  template:
    src: discos-set
    dest: /usr/bin
    mode: 0755
    force: yes


- name: Render the _discos-check-branch template
  become: True
  template:
    src: _discos-check-branch
    dest: /usr/bin
    mode: 0755
    force: yes
