---

- name: Retrieve the typed {{ user }} password
  block:
    - set_fact:
        user_pwd: "{{ lookup('env', 'DISCOS_PWD') }}"
    - set_fact:
        user_pwd: "{{ user_pwd | password_hash('md5', user[:8]) }}"
      when: user_pwd != ""


- name: Retrieve the typed {{ observer }} password
  block:
    - set_fact:
        observer_pwd: "{{ lookup('env', 'OBSERVER_PWD') }}"
    - set_fact:
        observer_pwd: "{{ observer_pwd | password_hash('md5', observer[:8]) }}"
      when: observer_pwd != ""


- name: Define the list of users to be inserted in the machines
  block:
    - set_fact:
        users: [{ name: "{{ user }}", uid: "3060", password: "{{ user_pwd }}" }]
    - set_fact:
        users: "{{ users + [{ 'name': 'observer', 'uid': '3061', 'password': observer_pwd }] }}"
      when: inventory_hostname in groups['console']


- name: Add the acs group
  group:
    name: acs
    gid: 335
    state: present


- name: Create the /discos directory
  file:
    path: /discos
    state: directory
    mode: 0755


- name: Add the users
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    group: acs
    uid: "{{ item.uid }}"
    home: "/discos/{{ item.name }}"
    state: present
    generate_ssh_key: yes
    ssh_key_file: .ssh/id_rsa
  no_log: true
  with_items: "{{ users }}"
  when: item.password != ""


- name: Add the user {{ user }} to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: '{{ user }}    ALL=(ALL)       ALL'


- name: Configure the projects group
  block:
    - name: Add the projects group
      group:
        name: projects
        gid: 336
        state: present
    - name: Append group projects to {{ user }} secondary groups
      user:
        name: "{{ user }}"
        groups: projects


- name: Create the DISCOS archive directory
  file:
    path: /archive
    state: directory
    owner: "{{ user }}"
    group: projects
    mode: 0755  


- name: Perform RSA key exchange between deployed machines
  block:
    - name: Make sure the ssh files exists
      file:
        path: "/discos/{{ user }}/.ssh/{{ item }}"
        state: touch
        owner: "{{ user }}"
        group: acs
        mode: 0600
      with_items:
        - "authorized_keys"
        - "known_hosts"
    - name: Removing old machine RSA fingerprints from known_hosts file
      lineinfile:
        path: /discos/{{ user }}/.ssh/known_hosts
        state: absent
        regexp: "^{{ hostvars[item].inventory_hostname }},{{ hostvars[item].inventory_hostname_short}},{{ hostvars[item].ansible_host }}(.*)$"
      with_items: "{{ play_hosts }}"
    - name: Fetch the machine RSA fingerprints
      command: cat /etc/ssh/ssh_host_rsa_key.pub
      register: machine_public_key
    - name: Add machine RSA fingerprints to known_hosts file
      lineinfile:
        path: /discos/{{ user }}/.ssh/known_hosts
        state: present
        line: "{{ hostvars[item].inventory_hostname }},{{ hostvars[item].inventory_hostname_short}},{{ hostvars[item].ansible_host }} {{ hostvars[item].machine_public_key.stdout }}"
      with_items:
        - "{{ play_hosts }}"
    - name: Fetch the {{ user }} user RSA public key
      command: cat /discos/{{ user }}/.ssh/id_rsa.pub
      register: user_public_key
    - name: Remove old public keys from authorized_keys file
      lineinfile:
        path: /discos/{{ user }}/.ssh/authorized_keys
        state: absent
        regexp: "^(.*)ansible-generated on {{ hostvars[item].inventory_hostname_short }}$"
      with_items: "{{ play_hosts }}"
    - name: Share public key with all machines in current deployment session
      lineinfile:
        path: /discos/{{ user }}/.ssh/authorized_keys
        state: present
        line: "{{ hostvars[item].user_public_key.stdout }}" 
      with_items:
        - "{{ play_hosts }}"
