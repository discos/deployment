---

- name: Create a temporary directory for the build
  become: True
  file:
    path: "{{ remote_build_path }}"
    state: directory
    owner: "{{ user }}"
    group: acs
    mode: 0770
    recurse: yes


- name: Check if ACS is already installed
  find: paths=/alma file_type=directory patterns="ACS*"
  register: target_dir


- name: Check if ACS binaries exist in the local repository
  stat: path={{ local_repository_path }}/{{ acs_dest.file }}
  delegate_to: 127.0.0.1
  register: acs_bin


- name: Check if ACS extprod exists in the local repository
  stat: path={{ local_repository_path }}/{{ extprod_dest.file }}
  delegate_to: 127.0.0.1
  register: extprod_bin


- name: Download {{ acs_orig.file }}
  get_url:
    url: "{{ acs_orig.base }}/{{ acs_orig.file }}"
    dest: "{{ local_repository_path }}/{{ acs_dest.file }}"
  when:
    - acs_bin.stat.exists == False
    - target_dir.matched|int == 0
  delegate_to: 127.0.0.1


- name: Download {{ extprod_orig.file }}
  get_url:
    url: "{{ extprod_orig.base }}/{{ extprod_orig.file }}"
    dest: "{{ local_repository_path }}/{{ extprod_dest.file }}"
  when:
    - extprod_bin.stat.exists == False
    - target_dir.matched|int == 0
  delegate_to: 127.0.0.1


- name: Copy {{ acs_dest.file }} to the remote
  become: True
  copy:
    src: "{{ local_repository_path }}/{{ acs_dest.file }}"
    dest: "{{ remote_build_path }}"
    owner: "{{ user }}"
    group: acs
  when: target_dir.matched|int == 0


- name: Copy {{ extprod_dest.file }} to the remote
  become: True
  copy:
    src: "{{ local_repository_path }}/{{ extprod_dest.file }}"
    dest: "{{ remote_build_path }}"
    owner: "{{ user }}"
    group: acs
  when: target_dir.matched|int == 0


- name: Extract the ACS archives
  become: True
  become_user: "{{ user }}"
  command: chdir={{ remote_build_path }} {{ item }}
  with_items:
    - tar jxvf {{ acs_dest.file }}
    - tar jxvf {{ extprod_dest.file }}
  when: target_dir.matched|int == 0


- name: Copy the ACS files to /
  become: True
  command: chdir={{ remote_build_path }} mv alma /
  when: target_dir.matched|int == 0


- name: Remove the directory used for the build
  become: True
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}"


################################
# Set the ACS user's environment
################################


- name: Copy the .acs dir from /alma to /discos/{{ user }}
  become: True
  become_user: "{{ user }}"
  command: chdir={{ acssw }}/config {{ item }}
  with_items:
    - cp .acs /discos/{{ user }} -R


- name: Create the .acs/tmp directory
  file:
    path: "/discos/{{ user }}/.acs/tmp/{{ inventory_hostname_short }}"
    state: directory
    owner: "{{ user }}"
    group: acs
    mode: 0775
    recurse: yes


- name: Copy the bashrc template
  become: True
  become_user: "{{ user }}"
  template:
    src: bashrc
    dest: /discos/{{ user }}/.bashrc
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes


- name: Copy the acsStartContainer with debugger
  become: True
  become_user: "{{ user }}"
  template:
    src: acsStartContainerGdb
    dest: /alma/{{ acs_tag }}/ACSSW/bin/
    owner: "{{ user }}"
    group: acs
    mode: 0755


- name: Copy the Python bz2.so from system to ACS
  become: True
  become_user: "{{ user }}"
  command: chdir=/usr/lib64/python2.6/lib-dynload/ {{ item }}
  with_items:
    - cp bz2.so /alma/ACS-FEB2017/Python/lib/python2.7/site-packages/


- name: Create a symlink to the correct Java home path, needed by ACS
  shell: readlink -f $(which java)
  register: java_home


- file:
    path: /usr/java
    state: directory


- file:
    src: "{{ java_home.stdout | regex_replace('/jre/bin/java') }}"
    dest: /usr/java/default
    state: link


#########################
# Apply some patch to ACS
#########################


- name: Read the ContainerServices.py file
  shell: cat {{ container_services }}
  register: container_services_content


- name: Replace ContainerServices.py
  become: True
  template:
    src: ContainerServices.py
    dest: "{{ container_services }}"
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes
  when: container_services_content.stdout.find('getattr') == -1


- name: Read the BaciHelper.py file
  shell: cat {{ baci_helper }}
  register: baci_helper_content


- name: Replace BaciHelper.py
  become: True
  template:
    src: BaciHelper.py
    dest: "{{ baci_helper }}"
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes
  when: baci_helper_content.stdout.find('getattr') == -1


- name: Replace ExecuteContainer.java
  become: True
  template:
    src: ExecuteContainer.java
    dest: "{{ execute_container }}"
    owner: "{{ user }}"
    group: acs
    mode: 0755
    backup: yes


- name: Replace Executor.java
  become: True
  template:
    src: Executor.java
    dest: "{{ executor }}"
    owner: "{{ user }}"
    group: acs
    mode: 0755
    backup: yes


- file:
    path: "{{ acs_command_center }}/idl"
    owner: "{{ user }}"
    group: acs
    state: directory
    mode: 0755


- name: Copy interfaces to acscommandcenter
  become: True
  command: "cp {{ acssw }}/idl/{{ item }} {{ acs_command_center }}/idl/"
  with_items:
    - AcsCommandCenterEntities.xml
    - AcsCommandCenterProject.xsd
    - AcsCommandCenterTools.xsd


- name: Build acscommandcenter
  become: True
  become_user: "{{ user }}"
  become_flags: "-i"
  shell: source ~/.bashrc && chdir={{ acs_command_center }}/src {{ item }}
  with_items:
      - make clean
      - make


- name: Copy Acs Command Center .jar files
  become: True
  shell: "cp -b {{ acs_command_center }}/lib/{{ item }} {{ acssw }}/lib/"
  with_items:
      - acscommandcenter.jar
      - AcsCommandCenterEntities.jar


############################
# Remove the boost directory
############################

- name: Remove the ACS boost directory
  become: True
  become_user: "{{ user }}"
  file: path=/alma/{{ acs_tag }}/boost state=absent


# ACS source files from:
# http://git-dev.sco.alma.cl/cgit/ACS/
#
# ACS binaries from:
# http://webdav.sco.alma.cl/public/Releases/
