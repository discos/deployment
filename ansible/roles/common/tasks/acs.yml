---

- name: Create a temporary directory for the build
  become: True
  file:
    path: "{{ remote_build_path }}"
    state: directory
    owner: "{{ user }}"
    group: acs
    mode: 0770
    recurse: yes


- name: Check if ACS is already installed
  find: paths=/alma file_type=directory patterns="ACS*"
  register: target_dir


- name: Check if ACS binaries exist in the local repository
  stat: path={{ local_repository_path }}/{{ acs_dest.file }}
  delegate_to: 127.0.0.1
  register: acs_bin


- name: Check if ACS extprod exists in the local repository
  stat: path={{ local_repository_path }}/{{ extprod_dest.file }}
  delegate_to: 127.0.0.1
  register: extprod_bin


- name: Download {{ acs_orig.file }}
  get_url:
    url: "{{ acs_orig.base }}/{{ acs_orig.file }}"
    dest: "{{ local_repository_path }}/{{ acs_dest.file }}"
  when:
    - acs_bin.stat.exists == False
    - target_dir.matched|int == 0
  delegate_to: 127.0.0.1


- name: Download {{ extprod_orig.file }}
  get_url:
    url: "{{ extprod_orig.base }}/{{ extprod_orig.file }}"
    dest: "{{ local_repository_path }}/{{ extprod_dest.file }}"
  when:
    - extprod_bin.stat.exists == False
    - target_dir.matched|int == 0
  delegate_to: 127.0.0.1


- name: Copy {{ acs_dest.file }} to the remote
  become: True
  copy:
    src: "{{ local_repository_path }}/{{ acs_dest.file }}"
    dest: "{{ remote_build_path }}"
    owner: "{{ user }}"
    group: acs
  when: target_dir.matched|int == 0


- name: Copy {{ extprod_dest.file }} to the remote
  become: True
  copy:
    src: "{{ local_repository_path }}/{{ extprod_dest.file }}"
    dest: "{{ remote_build_path }}"
    owner: "{{ user }}"
    group: acs
  when: target_dir.matched|int == 0


- name: Extract the ACS archives
  become: True
  become_user: "{{ user }}"
  command: chdir={{ remote_build_path }} {{ item }}
  with_items:
    - tar jxvf {{ acs_dest.file }}
    - tar jxvf {{ extprod_dest.file }}
  when: target_dir.matched|int == 0


- name: Copy the ACS files to /
  become: True
  command: chdir={{ remote_build_path }} mv alma /
  when: target_dir.matched|int == 0


- name: Remove the directory used for the build
  become: True
  file: path={{ item }} state=absent
  with_items:
    - "{{ remote_build_path }}"


#########################
# Apply some patch to ACS
#########################

- name: Read the BaciHelper.py file
  shell: cat {{ baci_helper }}
  register: baci_helper_content

- name: Replace BaciHelper.py
  become: True
  template:
    src: BaciHelper.py
    dest: "{{ baci_helper }}"
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes
  when: baci_helper_content.stdout.find('getattr') == -1


################################
# Set the ACS user's environment
################################


- name: Copy the .acs dir from /alma to /home/{{ user }}
  become: True
  become_user: "{{ user }}"
  command: chdir={{ acssw }}/config {{ item }}
  with_items:
    - cp .acs /home/{{ user }} -R


- name: Copy the bashrc template
  become: True
  become_user: "{{ user }}"
  template:
    src: bashrc
    dest: /home/{{ user }}/.bashrc
    owner: "{{ user }}"
    group: acs
    mode: 0644
    force: yes


- name: Copy the acsStartContainer with debugger
  become: True
  become_user: "{{ user }}"
  template:
    src: acsStartContainerGdb
    dest: /alma/{{ acs_tag }}/ACSSW/bin/
    owner: "{{ user }}"
    group: acs
    mode: 0755



# ACS source files from:
# http://git-dev.sco.alma.cl/cgit/ACS/
#
# ACS binaries from:
# http://webdav.sco.alma.cl/public/Releases/
