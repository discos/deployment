---

- name: Make sure x11vnc yum package is not installed
  ansible.builtin.yum:
    name: x11vnc
    state: absent


- name: Install the libvncserver-devel package
  ansible.builtin.yum:
    name: libvncserver-devel
    state: present


- name: Check if the custom x11vnc is installed
  ansible.builtin.stat:
    path: "/usr/local/bin/x11vnc"
  register: x11vnc_present


- name: Download the custom x11vnc sources
  ansible.builtin.get_url:
    url: "{{ remote_repository_download_url }}/{{ x11vnc_file }}"
    dest: "{{ local_repository_path }}"
    mode: "0644"
    headers:
      Authorization: "token {{ repository_token }}"
  when: not x11vnc_present.stat.exists
  delegate_to: localhost
  run_once: true
  no_log: true


- name: Copy {{ x11vnc_file }} to the remote {{ remote_build_path }}
  ansible.builtin.unarchive:
    src: "{{ local_repository_path }}/{{ x11vnc_file }}"
    dest: "{{ remote_build_path }}"
  when: not x11vnc_present.stat.exists


- name: Install the custom x11vnc
  ansible.builtin.shell: "{{ item }}"
  with_items:
    - "autoreconf -fiv"
    - "./configure"
    - "source /etc/profile && make"
    - "make install"
  args:
    chdir: "{{ remote_build_path }}/{{ x11vnc_dir }}"
  when: not x11vnc_present.stat.exists
  changed_when: not x11vnc_present.stat.exists


- name: Create the /var/log/x11vnc_{{ item.value.name }}.log
  ansible.builtin.file:
    path: "/var/log/x11vnc_{{ item.value.name }}.log"
    state: touch
    owner: "{{ item.value.name }}"
    group: "{{ item.value.group }}"
    mode: "0640"
  with_dict: "{{ users }}"
  no_log: true
