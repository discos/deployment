---

- name: Install some yum dependencies
  ansible.builtin.yum:
    name:
      - sg3_utils
      - lsof
      - attr
      - compat-openmpi16
      - lvm2
    state: present


#########################
# e2fsprogs configuration
#########################

- name: Copy e2fsprogs yum packages to the remote
  ansible.builtin.copy:
    src: "{{ local_repository_path }}/{{ item }}-{{ e2fsprogs_tail }}"
    dest: "/tmp/"
    mode: "0644"
  with_items: "{{ e2fsprogs_files }}"


- name: Install e2fsprogs yum packages
  ansible.builtin.yum:
    name: "{{ e2fsprogs_files | map('regex_replace', '(.*)', '/tmp/\\1-' + e2fsprogs_tail) | list }}"
    state: present
    validate_certs: false


- name: Delete e2fsprogs packages from the remote
  ansible.builtin.file:
    path: "/tmp/{{ item }}-{{ e2fsprogs_tail }}"
    state: absent
  with_items: "{{ e2fsprogs_files }}"


######################
# Lustre configuration
######################

- name: Copy lustre server kernel yum packages to the remote
  ansible.builtin.copy:
    src: "{{ local_repository_path }}/{{ item }}-{{ lustre_server_kernel_tail }}"
    dest: "/tmp/"
    mode: "0644"
  with_items: "{{ lustre_server_kernel_files }}"


- name: Install lustre server kernel yum packages
  ansible.builtin.yum:
    name: "{{ lustre_server_kernel_files | map('regex_replace', '(.*)', '/tmp/\\1-' + lustre_server_kernel_tail) | list }}"
    state: present
    validate_certs: false


- name: Delete lustre server kernel packages from the remote
  ansible.builtin.file:
    path: "/tmp/{{ item }}-{{ lustre_server_kernel_tail }}"
    state: absent
  with_items: "{{ lustre_server_kernel_files }}"


- name: Check if a reboot is required
  ansible.builtin.shell: "if [ $(rpm -q kernel|tail -n 1) != kernel-$(uname -r) ]; then echo 'reboot'; else echo 'no'; fi"
  ignore_errors: true
  register: reboot_required
  changed_when: reboot_required.stdout.find("reboot") != -1


- name: Reboot the machine if required
  ansible.builtin.reboot:
    msg: 'Kernel update with lustre modules.'
  when: reboot_required.stdout.find("reboot") != -1


- name: Copy lustre server yum packages to the remote
  ansible.builtin.copy:
    src: "{{ local_repository_path }}/{{ item }}-{{ lustre_server_tail }}"
    dest: "/tmp/"
    mode: "0644"
  with_items: "{{ lustre_server_files }}"


- name: Install lustre server yum packages
  ansible.builtin.yum:
    name: "{{ lustre_server_files | map('regex_replace', '(.*)', '/tmp/\\1-' + lustre_server_tail) | list }}"
    state: present
    validate_certs: false


- name: Delete lustre server packages from the remote
  ansible.builtin.file:
    path: "/tmp/{{ item }}-{{ lustre_server_tail }}"
    state: absent
  with_items: "{{ lustre_server_files }}"


- name: Add lustre configuration into modprobe.d
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/lustre.conf
    line: "options lnet networks=tcp({{ lustre_network_interface }})"
    state: present
    create: true
    mode: "0644"


- name: Load lustre modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - lnet
    - lustre


- name: Add lustre modules to startup modules
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/modules/lustre.modules
    line: "{{ item.line }}"
    state: present
    create: true
    mode: "0755"
    insertbefore: "{{ item.before }}"
  with_items:
    - { line: '#!/bin/sh', before: "BOF" }
    - { line: 'modprobe -v lustre', before: "" }


- name: Initialize lustre disk
  community.general.parted:
    device: "{{ lustre_device }}"
    label: gpt
  when: initialize_lustre_disk and lustre_device is defined


- name: Set mount point names
  ansible.builtin.set_fact:
    lustre_mount_points:
      - "/lustre"
      - "/lustre/mgs-mdt"
      - "/lustre/ost"
  when: merge_mgs_mdt


- name: Set mount point names
  ansible.builtin.set_fact:
    lustre_mount_points:
      - "/lustre"
      - "/lustre/mgs"
      - "/lustre/mdt"
      - "/lustre/ost"
  when: not merge_mgs_mdt


- name: Create the lustre mount points
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items: "{{ lustre_mount_points }}"


- name: Create the lustre mgs-mdt partition
  community.general.parted:
    device: "{{ lustre_mgs_mdt_partition.device }}"
    number: "{{ lustre_mgs_mdt_partition.number }}"
    state: present
    part_start: "{{ lustre_mgs_mdt_partition.start }}"
    part_end: "{{ lustre_mgs_mdt_partition.end }}"
    label: gpt
  when:
    - initialize_lustre_disk
    - merge_mgs_mdt


- name: Create the lustre mgs and mdt partitions
  when:
    - initialize_lustre_disk
    - not merge_mgs_mdt
  block:
    - name: Create the lustre mgs partition
      community.general.parted:
        device: "{{ lustre_mgs_partition.device }}"
        number: "{{ lustre_mgs_partition.number }}"
        state: present
        part_start: "{{ lustre_mgs_partition.start }}"
        part_end: "{{ lustre_mgs_partition.end }}"
        label: gpt
    - name: Create the lustre mdt partition
      community.general.parted:
        device: "{{ lustre_mdt_partition.device }}"
        number: "{{ lustre_mdt_partition.number }}"
        state: present
        part_start: "{{ lustre_mdt_partition.start }}"
        part_end: "{{ lustre_mdt_partition.end }}"
        label: gpt


- name: Create the lustre data partition
  community.general.parted:
    device: "{{ lustre_ost_partition.device }}"
    number: "{{ lustre_ost_partition.number }}"
    state: present
    part_start: "{{ lustre_ost_partition.start }}"
    part_end: "{{ lustre_ost_partition.end }}"
    label: gpt
  when: initialize_lustre_disk


- name: Format the lustre mgs-mdt partition
  ansible.builtin.command: "mkfs.lustre --fsname=discos --mgs --mdt {{ lustre_mgs_mdt_partition.device }}{{ lustre_mgs_mdt_partition.number }}"
  register: command_result
  failed_when:
    - command_result.rc != 0
    - command_result.rc != 1
    - command_result.rc != 17
  when: merge_mgs_mdt
  changed_when: true


- name: Format the lustre mgs and mdt partitions
  when: not merge_mgs_mdt
  block:
    - name: Format the lustre mgs partition
      ansible.builtin.command: "mkfs.lustre --mgs {{ lustre_mgs_partition.device }}{{ lustre_mgs_partition.number }}"
      register: command_result
      failed_when:
        - command_result.rc != 0
        - command_result.rc != 1
        - command_result.rc != 17
      changed_when: true
    - name: Format the lustre mdt partition
      ansible.builtin.command: "mkfs.lustre --mdt --fsname=discos --mgsnode={{ lustre_server_ip }}@tcp --index=0\
               {{ lustre_mdt_partition.device }}{{ lustre_mdt_partition.number }}"
      register: command_result
      failed_when:
        - command_result.rc != 0
        - command_result.rc != 1
        - command_result.rc != 17
      changed_when: true


- name: Mount the lustre mgs-mdt partition
  ansible.posix.mount:
    path: /lustre/mgs-mdt
    src: "{{ lustre_mgs_mdt_partition.device }}{{ lustre_mgs_mdt_partition.number }}"
    fstype: lustre
    state: mounted
    opts: defaults,abort_recovery
  when: merge_mgs_mdt


- name: Mount the lustre mgs and mdt partitions
  when: not merge_mgs_mdt
  block:
    - name: Mount the lustre mgs and mdt partitions
      ansible.posix.mount:
        path: /lustre/mgs
        src: "{{ lustre_mgs_partition.device }}{{ lustre_mgs_partition.number }}"
        fstype: lustre
        state: mounted
        opts: defaults
    - name: Mount the lustre mgs and mdt partitions
      ansible.posix.mount:
        path: /lustre/mdt
        src: "{{ lustre_mdt_partition.device }}{{ lustre_mdt_partition.number }}"
        fstype: lustre
        state: mounted
        opts: defaults,abort_recovery


- name: Format the lustre data partition
  ansible.builtin.command: "mkfs.lustre --ost --fsname=discos --mgsnode={{ lustre_server_ip }}@tcp \
                           --index=0 {{ lustre_ost_partition.device }}{{ lustre_ost_partition.number }}"
  changed_when: true
  register: command_result
  failed_when:
    - command_result.rc != 0
    - command_result.rc != 1
    - command_result.rc != 17


- name: Mount the lustre data partition
  ansible.posix.mount:
    path: /lustre/ost
    src: "{{ lustre_ost_partition.device }}{{ lustre_ost_partition.number }}"
    fstype: lustre
    state: mounted
    opts: defaults,abort_recovery


- name: Create the lustre clients list
  ansible.builtin.set_fact:
    lustre_clients_list: ""


- name: Update the lustre clients list
  ansible.builtin.set_fact:
    lustre_clients_list: "{{ lustre_clients_list }} {{ hostvars[item].inventory_hostname_short }}"
  with_items: "{{ groups['all'] }}"
  when:
    - hostvars[item].lustre_network_interface is defined
    - hostvars[item].lustre_type == "client"


- name: Copy the lustre-server-service template
  ansible.builtin.template:
    src: lustre-server-service
    dest: /usr/bin/lustre
    mode: "0755"
    force: true


- name: Copy the lustre-server-unit template
  ansible.builtin.template:
    src: lustre-server-unit
    dest: /usr/lib/systemd/system/lustre.service
    mode: "0644"
    force: true


- name: Start the server lustre service
  ansible.builtin.systemd:
    name: lustre
    state: restarted
    enabled: true
    daemon_reload: true
    force: true


- name: Tune the /{{ archive }} directory permissions after mount
  ansible.builtin.file:
    path: /{{ archive }}
    state: directory
    owner: "{{ user.name }}"
    group: "{{ users_groups.projects }}"
    mode: "0755"
