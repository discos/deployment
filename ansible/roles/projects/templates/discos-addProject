#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import argparse
import getpass
import subprocess
import time
import random
import string
import pwd as pwd_module
from threading import Thread
from passlib.hash import md5_crypt

parser = argparse.ArgumentParser(
    description=('Add a project user to the DISCOS environment')
)
parser.add_argument(
    'user',
    type=str,
    help='the name of the project user you want to add'
)
parser.add_argument(
    '--ask-password',
    action='store_true',
    default=False,
    help='ask for a custom password instead of an auto-generated one'
)
parser.add_argument(
    '--uid',
    type=int,
    default=None,
    help="force the new user's UID to be the one given from command line"
)
args = parser.parse_args()

FNULL = open(os.devnull, 'w')

{% if nis_server_ip is defined %}
nis_server_ip = '{{ nis_server_ip }}'
{% else %}
nis_server_ip = None
{% endif %}

{% if fs_server_ip is defined %}
fs_server_ip = '{{ archive_server_ip }}'
{% else %}
fs_server_ip = None
{% endif %}

cmd = ['getent', 'passwd', args.user]
if nis_server_ip:
    cmd = ['ssh', nis_server_ip] + cmd

user_absent = subprocess.call(cmd, stdout=FNULL)

if not user_absent:
    print(f"Project user '{args.user}' already present!")
    sys.exit(1)

if args.uid:
    cmd = ['getent', 'passwd', f'{args.uid}']
    if nis_server_ip:
        cmd = ['ssh', nis_server_ip] + cmd

    uid_absent = subprocess.call(cmd, stdout=FNULL)

    if not uid_absent:
        print(f"UID '{args.uid}' already present!")
        sys.exit(1)

def add_remote(user, useradd, nis_server_ip):
    useradd = ['sudo', 'ssh', nis_server_ip] + useradd + ['-M', user]
    subprocess.call(useradd, stdout=FNULL)

    subprocess.call([
        'sudo',
        'ssh',
        nis_server_ip,
        '/usr/lib64/yp/ypinit',
        '-m'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'systemctl',
        'stop',
        'ypbind.service'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'ssh',
        nis_server_ip,
        'systemctl',
        'restart',
        'ypserv'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'systemctl',
        'restart',
        'ypbind.service'
    ], stdout=FNULL)

def dir_remote(user, fs_server_ip):
    uid = pwd_module.getpwnam(user).pw_uid
    paths = {
        f'/{{ archive }}/schedules/{user}': [
            f'u:{uid}:rwx',
            f'd:u:{getpass.getuser()}:rwx'
        ],
        f'/{{ archive }}/data/{user}': [
            f'u:{uid}:r-x',
            f'd:u:{getpass.getuser()}:rwx',
            f'd:u:{uid}:r-x'
        ],
        f'/{{ archive }}/extraData/{user}': [
            f'u:{uid}:r-x',
            f'd:u:{getpass.getuser()}:rwx',
            f'd:u:{uid}:r-x'
        ]
    }

    for path in paths.keys():
        try:
            os.stat(path)
        except:
            os.mkdir(path)
        for acl in paths[path]:
            subprocess.call([
                'sudo',
                'ssh',
                fs_server_ip,
                'setfacl',
                '-m',
                acl,
                path
            ], stdout=FNULL)

def add_local(user, useradd):
    useradd = ['sudo'] + useradd + ['-m', user]
    subprocess.call(useradd, stdout=FNULL)

def dir_local(user):
    paths = {
            f'/{{ archive }}/schedules/{user}': [
            f'u:{user}:rwx',
            f'd:u:{getpass.getuser()}:rwx'
        ],
            f'/{{ archive }}/data/{user}': [
            f'u:{user}:r-x',
            f'd:u:{getpass.getuser()}:rwx',
            f'd:u:{user}:r-x'
        ],
            f'/{{ archive }}/extraData/{user}': [
            f'u:{user}:r-x',
            f'd:u:{getpass.getuser()}:rwx',
            f'd:u:{user}:r-x'
        ]
    }

    for path in paths.keys():
        try:
            os.stat(path)
        except:
            os.mkdir(path)
        for acl in paths[path]:
            subprocess.call(['setfacl', '-m', acl, path], stdout=FNULL)

def add_user(nis_server_ip, fs_server_ip, user, pwd, uid):
    useradd = [
        'useradd',
        '-g',
        'projects',
        '-G',
        'projects,users',
        '-n',
        '-s',
        '/bin/bash',
        '-p',
        f"'{pwd}'" if nis_server_ip else f'{pwd}'
    ]
    if uid:
        useradd += ['-u', f'{uid}']

    if nis_server_ip:
        add_remote(user, useradd, nis_server_ip)
    else:
        add_local(user, useradd)

    if fs_server_ip:
        dir_remote(user, fs_server_ip)
    else:
        dir_local(user)

    subprocess.call([
        'sudo',
        'su',
        '-',
        user,
        '-c',
        'date>>discosUser'
    ], stdout=FNULL)

if __name__ == '__main__':
    try:
        if args.ask_password:
            password = getpass.getpass(
                f'Type a password for user {args.user}: '
            )
            if password != getpass.getpass('Confirm password: '):
                print("Typed passwords don't match, retry!")
                sys.exit(2)
        else:
            password = (
                'p'
                + args.user.replace('-', '').zfill(4)
                + '-'
                + ''.join(
                    [random.choice(string.ascii_letters) for x in range(4)]
                )
            )

        pwd = md5_crypt.using(salt=args.user[8:], salt_size=8).hash(password)

        subprocess.call(['sudo', '-k'])
        if subprocess.call(['sudo', 'true']):
            sys.exit(0)

        sys.stdout.write(f"Adding '{args.user}' to project users")
        sys.stdout.flush()

        t = Thread(
            target=add_user,
            args=(nis_server_ip, fs_server_ip, args.user, pwd, args.uid)
        )
        t.daemon = True
        t.start()

        while t.is_alive():
                sys.stdout.write('...')
                sys.stdout.flush()
                time.sleep(1)
        print('done!')
        print(f'The password for user "{args.user}" is "{password}", enjoy!')
    except KeyboardInterrupt:
        sys.exit(0)
