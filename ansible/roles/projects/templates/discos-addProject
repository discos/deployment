#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import argparse
import getpass
import subprocess
import time
import random
import string
from threading import Thread
from passlib.hash import md5_crypt

parser = argparse.ArgumentParser(
    description=('Add a project user to the DISCOS environment')
)
parser.add_argument(
    'user',
    type=str,
    help='the name of the project user you want to add'
)
parser.add_argument(
    '--ask-password',
    action='store_true',
    default=False,
    help='ask for a custom password instead of an auto-generated one'
)
args = parser.parse_args()

FNULL = open(os.devnull, 'w')

{% if nis_server_ip is defined %}
server_ip = '{{ nis_server_ip }}'
{% else %}
server_ip = None
{% endif %}

cmd = ['getent', 'passwd', args.user]
if server_ip:
    cmd = ['ssh', server_ip] + cmd

user_absent = subprocess.call(cmd, stdout=FNULL)

if not user_absent:
    print("Project user '%s' already present!" % args.user)
    sys.exit(1)

def add_remote(server_ip, user, pwd):
    subprocess.call([
        'sudo',
        'ssh',
        server_ip,
        'useradd',
        '-g',
        'projects',
        '-G',
        'projects,users',
        '-M',
        '-n',
        '-s',
        '/bin/bash',
        '-p',
        "'%s'" % pwd,
        user
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'ssh',
        server_ip,
        '/usr/lib64/yp/ypinit',
        '-m'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'service',
        'ypbind',
        'stop'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'ssh',
        server_ip,
        'systemctl',
        'restart',
        'ypserv'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'service',
        'ypbind',
        'start'
    ], stdout=FNULL)

def add_local(user, pwd):
    subprocess.call([
        'sudo',
        'useradd',
        '-g',
        'projects',
        '-G',
        'projects,users',
        '-m',
        '-n',
        '-s',
        '/bin/bash',
        '-p',
        pwd,
        user
    ], stdout=FNULL)

def add_user(server_ip, user, pwd):
    if server_ip:
        add_remote(server_ip, user, pwd)
    else:
        add_local(user, pwd)

    paths = {
        '/{{ archive }}/schedules/%s' % user: [
            'u:%s:rwx' % user,
            'd:u:%s:rwx' % getpass.getuser()
        ],
        '/{{ archive }}/data/%s' % user: [
            'u:%s:r-x' % user,
            'd:u:%s:rwx' % getpass.getuser(),
            'd:u:%s:r-x' % user
        ],
        '/{{ archive }}/extraData/%s' % user: [
            'u:%s:r-x' % user,
            'd:u:%s:rwx' % getpass.getuser(),
            'd:u:%s:r-x' % user
        ]
    }

    for path in paths.keys():
        try:
            os.stat(path)
        except:
            os.mkdir(path)
        for acl in paths[path]:
            subprocess.call(['setfacl', '-m', acl, path], stdout=FNULL)

    subprocess.call([
        'sudo',
        'su',
        '-',
        user,
        '-c',
        'date>>discosUser'
    ], stdout=FNULL)

try:
    if args.ask_password:
        password = getpass.getpass('Type a password for user %s: ' % args.user)
        if password != getpass.getpass('Confirm password: '):
            print("Typed passwords don't match, retry!")
            sys.exit(2)
    else:
        password = (
            'p'
            + args.user.replace('-', '').zfill(4)
            + '-'
            + ''.join([random.choice(string.ascii_letters) for x in range(4)])
        )

    pwd = md5_crypt.using(salt=args.user[8:], salt_size=8).hash(password)

    subprocess.call(['sudo', '-k'])
    if subprocess.call(['sudo', 'true']):
        sys.exit(0)

    sys.stdout.write("Adding '%s' to project users" % args.user)
    sys.stdout.flush()

    t = Thread(target=add_user, args=(server_ip, args.user, pwd))
    t.daemon = True
    t.start()

    while t.is_alive():
            sys.stdout.write('...')
            sys.stdout.flush()
            time.sleep(1)
    print('done!')
    print('The password for user "%s" is "%s", enjoy!' % (args.user, password))
except KeyboardInterrupt:
    sys.exit(0)
