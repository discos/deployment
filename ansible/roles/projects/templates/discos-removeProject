#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import argparse
import subprocess
import shutil
import time
from threading import Thread

parser = argparse.ArgumentParser(
    description=('Remove a project user from the DISCOS environmet')
)
parser.add_argument(
    'user',
    type=str,
    help='the name of the project user you want to remove'
)
args = parser.parse_args()

FNULL = open(os.devnull, 'w')

{% if nis_server_ip is defined %}
server_ip = '{{ nis_server_ip }}'
{% else %}
server_ip = None
{% endif %}
gid = '{{ users_groups.projects }}'

cmd = ['getent', 'passwd', args.user]
if server_ip:
    cmd = ['ssh', server_ip] + cmd

user_absent = subprocess.call(cmd, stdout=FNULL)

def remove_remote(server_ip, user):
    subprocess.call([
        'sudo',
        'ssh',
        server_ip,
        'userdel',
        '-r',
        user
    ], stdout=FNULL, stderr=FNULL)

    subprocess.call([
        'sudo',
        'ssh',
        server_ip,
        '/usr/lib64/yp/ypinit',
        '-m'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'service',
        'ypbind',
        'stop'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'ssh',
        server_ip,
        'systemctl',
        'restart',
        'ypserv'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'service',
        'ypbind',
        'start'
    ], stdout=FNULL)

    subprocess.call([
        'sudo',
        'rm',
        '-rf',
        '/home/%s' % user
    ], stdout=FNULL)

def remove_local(user):
    subprocess.call([
        'sudo',
        'userdel',
        '-r',
        args.user
    ], stdout=FNULL)

def remove_user(server_ip, user):
    if server_ip:
        remove_remote(server_ip, user)
    else:
        remove_local(user)

    paths = [
        '/archive/data/%s',
        '/archive/schedules/%s',
        '/archive/extraData/%s'
    ]
    for path in paths:
        try:
            shutil.rmtree(path % args.user)
        except:
            pass

choices = {
    '': False,
    'n': False,
    'N': False,
    'y': True,
    'Y': True
}

try:
    try:
        u_gid = subprocess.check_output([
            'getent',
            'passwd',
            args.user
        ]).strip().split(':')[3]
        if u_gid != gid:
            raise ValueError
    except:
        print("'%s' is not a valid project user, retry!" % args.user)
        sys.exit(1)

    try:
        choice = choices.get(raw_input(
            'Are you sure you want to remove user %s? [y/N]: ' % args.user
        ))
    except (KeyboardInterrupt, EOFError):
        print('')
        raise KeyboardInterrupt
    if choice is None:
        print('Invalid choice, retry!')
        sys.exit(3)
    elif choice is False:
        sys.exit(0)

    subprocess.call(['sudo', '-k'])
    if subprocess.call(['sudo', 'true']):
        sys.exit(0)

    sys.stdout.write("Removing '%s' project user..." % args.user)
    sys.stdout.flush()

    t = Thread(target=remove_user, args=(server_ip, args.user))
    t.daemon = True
    t.start()

    while t.is_alive():
        sys.stdout.write('.')
        sys.stdout.flush()
        time.sleep(1)
    print('done!')
except KeyboardInterrupt:
    sys.exit(0)
