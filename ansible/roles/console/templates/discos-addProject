#! /bin/bash
# ********************************************************************************************* 
# IRA Istituto di Radioastronomia                                                                      
#
# This code is under GNU General Public Licence (GPL).                                              
#                                                                                                     
# Who                                 when            What                                             
# Andrea Orlati(aorlati@ira.inaf.it)  12/02/2011      Creation           
# Andrea Orlati(aorlati@ira.inaf.it)  11/01/2013      Adapted to environment of escs 0.3                 
# Andrea Orlati)andrea.orlati@inaf.it)13/08/2018      ported to discos environment
# Andrea Orlati)andrea.orlati@inaf.it)03/08/2018      support for localhost, i.e. in case of test environment
#*********************************************************************************************
#   NAME
#               addObserver
# 
#   SYNOPSIS
# 
#   DESCRIPTION
#   This script creates a user for the discos observing system. It could be executed only by the system manager 
#   on the system management machine. It targets the server providing authentication for the users (nis server)
#   The manager must have sudoers grants for bash commands useradd and usermod in the server. 
#   The group observers must exist on nis server. 
#       
#   FILES
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS     
#


function printUsage {
    echo "Creates a new user/project for the DISCOS observing system, it also creates all the required directory structures"
    echo ""
    echo "Usage: `basename $0` -u|--user project [-l|--login serverLogin] [-s|--server serverAdder]"
    echo ""
    echo "-u|--user allows to give the name of the project to be created"
    echo "[-l|--login] provides the account to be used to login into authentication server. If not given internal default is used"
    echo "[-s|--server] provides the authentication server address. If not given the internal default is used"
}

CL_HELP=
CL_USER=
CL_USER=
CL_SERVER=

LONGOPTS=help,user,login,server:
SHORTOPTS=hu:l:s:

SERVERUSER={{ user }}
{% if nis_server_ip is defined %}
SERVER={{ nis_server_ip }}
{% else %}
SERVER=localhost
{% endif %}

getopt -n `basename $0` -Q -u -a -l $LONGOPTS $SHORTOPTS "$@" || {
    printUsage
    exit
}

set -- `getopt -u -a -l $LONGOPTS $SHORTOPTS "$@"`

#
# Iterate over getopt's output and set CL_XXX variables accordingly
#
while : 
do
    case "$1" in
        --help)             CL_HELP=true ;;
        -h)                 CL_HELP=true ;;
        --user)             CL_USER=$2 ; shift ;;
        -u)                 CL_USER=$2 ; shift ;;
        --login)            CL_LOGIN=$2 ; shift ;;
        -l)                 CL_LOGIN=$2 ; shift ;;
        --server)          CL_SERVER=$2 ; shift ;;
        -s)                 CL_SERVER=$2 ; shift ;;
        --) break ;;
    esac
    shift
done
shift

if [ "$CL_HELP" ]; then
    printUsage
    exit
fi

if [ ! -n "$CL_USER" ]; then
    echo "%%%% user name is mandatory!\n"
    printUsage
    exit
fi

if [ "$CL_SERVER" ]; then
    SERVER=$CL_SERVER
fi

if [ "$CL_LOGIN" ]; then
    SERVERUSER=$CL_LOGIN
fi

ADDRESSES=$(hostname -I)
LO=" 127.0.0.1"
HOSTADDRESSES=$(echo $ADDRESSES | tr " " "\n")$LO

REMOTESERVER="YES"

for x in $HOSTADDRESSES
do
    if [ "$SERVER" == "$x" ]; then
        REMOTESERVER="NO"
    fi
done

echo "**** please type password for user "$SERVERUSER" for the authentication server "$SERVER" :"
read -r -s PASSWORD

echo "**** please select password for the new project :"
read -r -s USERPASSWORD

echo "**** please retype for matching check :"
read -r -s MATCHPASS

if [ $USERPASSWORD = $MATCHPASS ]; then
    echo "**** Ok"
else
    echo "%%%% sorry, no match...."
    exit
fi

if [ "$REMOTESERVER" == "YES" ]; then
    echo "**** adding new user remotely......"
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "echo $PASSWORD | sudo -S /usr/sbin/useradd -g observers -G observers,users -M -n -s /bin/bash $CL_USER"
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "echo $PASSWORD | sudo -S /usr/sbin/usermod -U $CL_USER"
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "echo $PASSWORD > temppwd ; echo $USERPASSWORD >> temppwd"
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "cat temppwd | sudo -S passwd $CL_USER --stdin"
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "rm temppwd"
    echo "**** done"
    echo "**** update yellow pages......"
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "echo $PASSWORD | sudo -S /usr/lib64/yp/ypinit -m"
    echo $PASSWORD | sudo -S /sbin/service ypbind stop
    sleep 1s
    sshpass -p $PASSWORD ssh -t $SERVERUSER@$SERVER "echo $PASSWORD | sudo -S systemctl restart ypserv"
    sleep 2s
    echo $PASSWORD | sudo -S /sbin/service ypbind start
    CHECKIT=$(id -u $CL_USER)
    if [ ! -n "$CHECKIT" ]; then
        echo "%%%% something goes wrong, please check everything is properly working"
        exit
    fi
else
    echo "**** adding new user locally......"
    echo $PASSWORD | sudo -S /usr/sbin/useradd -g observers -G observers,users -M -n -s /bin/bash $CL_USER
    echo $PASSWORD | sudo -S /usr/sbin/usermod -U $CL_USER
    echo $PASSWORD > temppwd ; echo $USERPASSWORD >> temppwd
    cat temppwd | sudo -S passwd $CL_USER --stdin
    rm temppwd
    echo "**** done"
fi
echo "**** project $CL_USER correctly added as registered project"
echo "**** directory structures......"
mkdir /archive/schedules/$CL_USER
setfacl -m u:$CL_USER:rwx /archive/schedules/$CL_USER
setfacl -m d:u:discos:rwx /archive/schedules/$CL_USER 
mkdir /archive/data/$CL_USER
setfacl -m u:$CL_USER:r-x /archive/data/$CL_USER
setfacl -m d:u:discos:rwx /archive/data/$CL_USER 
setfacl -m d:u:$CL_USER:r-x /archive/data/$CL_USER
mkdir /archive/extraData/$CL_USER
setfacl -m u:$CL_USER:r-x /archive/extraData/$CL_USER
setfacl -m d:u:discos:rwx /archive/extraData/$CL_USER 
setfacl -m d:u:$CL_USER:r-x /archive/extraData/$CL_USER
#login to force user home creation.....
sshpass -p $USERPASSWORD ssh $CL_USER@$HOST "cd; date>>discosUser"
echo "**** done"
echo "**** ...all done, enjoy"
#
# ___oOo___
