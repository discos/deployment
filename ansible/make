#! /usr/bin/env python
"""Some command line examples:

  $ ./make nuraghe:development
  $ ./make nuraghe:production
  $ ./make escs:development
  $ ./make discos-mng:development --station SRT
  $ ./make nuraghe:development --version 0.6
  $ ./make nuraghe:development --version latest
  $ ./make nuraghe:development --only deployment --version latest
  $ ./make nuraghe:development --only deployment --version master
  $ ./make nuraghe:development --only provisioning
"""

from __future__ import print_function
import os
import sys
import argparse
import itertools
import subprocess


ENVIRONMENTS = ['development', 'production']
STATIONS = ['SRT', 'Medicina', 'Noto']
TAGS = ['provisioning', 'deployment']
REPO = 'https://github.com/marco-buttu/pycon_doctest.git'
ROOT_DIR = os.path.dirname(os.path.realpath(__file__))

systems = []
clusters = {}
for env in ENVIRONMENTS:
    clusters[env] = []
    inventory = '%s/inventories/%s' % (ROOT_DIR, env)
    hosts_file = os.path.join(inventory, 'hosts')
    with open(hosts_file) as f:
        for line in f:
            if line.startswith('['):
                text = line[line.find('[')+1:line.find(']')]
                host = text.split(':')[0] if ':' in text else text
                if host not in  ('multi', 'local'):
                    clusters[env].append(host)
                    systems.append('%s:%s' % (host, env))


parser = argparse.ArgumentParser(
    description='Make a disco environment. %s' % __doc__,
    formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument(
    'system',
    help='%s, %s, ...' % (systems[-1], systems[-2]))
parser.add_argument(
    '-s',
    '--station',
    default='')
parser.add_argument(
    '-o',
    '--only',
    default='')


def error(msg, choices=(), name=''):
    if choices:
        choices_msg = 'Allowed values of %s:\n' % name
    else:
        choices_msg = ''
    print('\nERROR: %s%s' % (msg, choices_msg), file=sys.stderr)
    if choices:
          for choice in choices:
              print(' '*2, choice, file=sys.stderr)
    print('\n%s' %  __doc__, file=sys.stderr)
    sys.exit(1)
args = parser.parse_args()


# Check if the system cluster:environment exists
if ':' not in args.system:
    e = ENVIRONMENTS[-1]  # A random environment
    c = clusters[e][-1]  # A random cluster
    msg = ('You must specify an available system.\n'
           'e.g. if the cluster is "%s" '
           'and the environment is "%s",\n'
           'the system is "%s:%s", and the command will be:'
           '\n\n  $ ./make %s:%s.\n\n' % (c, e, c, e, c, e))
    error(msg, choices=systems, name='system')
else:
    cluster_arg, env_arg = args.system.split(':')
    if env_arg in ENVIRONMENTS:
        allowed_clusters = clusters[env_arg]
        c = allowed_clusters[-1]  # A random cluster
        # wrong_cluster:right_env
        if cluster_arg not in allowed_clusters:
             msg = ('Cluster "%s" not found in the "%s" '
                    'environment.\n' % (cluster_arg, env_arg))
             error(msg,
                   allowed_clusters,
                   name='cluster (in %s)' % env_arg)
    else:
        pass
        # right_cluster:wrong_env

# TODO: from here. Manage the case of env_arg not in ENVIRONMENTS:
# I have to check if the cluster is not in clusters, and in case
# it is not, I have to raise error.  If it is in clusters, I have
# to raise the error for env not in ENV.

inventory = '%s/inventories/%s' % (ROOT_DIR, user_env)

if args.build_type not in ENVIRONMENTS:
    error('You must specify an available build type.', BUILDS)
else:
    inventory = '%s/inventories/%s' % (ROOT_DIR, args.build_type)

inventory = '%s/inventories/%s' % (ROOT_DIR, args.build_type)

# itertools.product(hosts, ENVIRONMENT)

# The system must be defined in hosts (like nuraghe, escs, ...)
system = args.system
hosts = []
with open(os.path.join(inventory, 'hosts')) as f:
    for line in f:
        if line.startswith('['):
            text = line[line.find('[')+1:line.find(']')]
            host = text.split(':')[0] if ':' in text else text
            if host not in  ('multi', 'local'):
                hosts.append(host)

if args.system not in hosts:
    error('You must specify an available system.', hosts)


# Version management
# $ ./make nuraghe development --version 0.6
# Come posso gestire due versioni? Se voglio avere nella
# Stessa macchina il master e la versione X?
# Potrei fare cosi': quando uno da --version, allora
# viene usato il tag deployment e anche quello version. 
# Il tag version verifica se quella versione esiste gia',
# e se non esiste fa il clone e configura acsenv in modo
# da creare un alias che permetta di passare da una introot
# all'altra.  L'introot viene creata durante il deployment,
# non durante acs.yml.
# Il prompt della shell deve mostrare il tipo di branch:
# master, version-0.6, ecc.

playbook = '%s/all.yml'  % ROOT_DIR
tags = ''


# When the system is nuraghe or escs, the station is automatically
# SRT and Medicina.  Noto?
if args.station not in ('nuraghe', 'escs') and not args.station:
    parser.error(
        'You must specify a station (SRT, Medicina, Noto).'
        '%s'  % __doc__
    )
else:
    extra_vars = 'cdb=%s'  % args.system

subprocess.call([
    'ansible-playbook', 'all.yml',
    '--inventory-file', inventory,
    '--limit', cluster_arg,
    '--extra-vars', extra_vars,
    '--tags', tags,
])


